{"mappings":"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","sources":["<anon>","src/js/components/ImageLightbox/ImageLightbox.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire9b4d\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2HRTo\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", function () { return $1f8966d5bd745c7a$export$2e2bcd8739ae039; });\n/**\n * ImageLightbox Web Component\n *\n * A accessible lightbox modal for viewing case study images in full size.\n * Supports keyboard navigation, touch gestures, and maintains WCAG 2.1 Level AA compliance.\n *\n * Features:\n * - Click on images to open in lightbox\n * - Keyboard navigation (ESC to close, arrow keys for navigation)\n * - Touch/swipe gestures on mobile\n * - Focus management for accessibility\n * - Image captions support\n * - Responsive design\n *\n * @extends HTMLElement\n */ class $1f8966d5bd745c7a$var$ImageLightbox extends HTMLElement {\n    constructor(){\n        super();\n        this.attachShadow({\n            mode: \"open\"\n        });\n        // State management\n        this.isOpen = false;\n        this.currentImageIndex = 0;\n        this.images = [];\n        this.originalFocusElement = null;\n        // Touch handling for mobile gestures\n        this.touchStartX = 0;\n        this.touchStartY = 0;\n        this.minSwipeDistance = 50;\n        // Bind methods to preserve context\n        this.handleKeydown = this.handleKeydown.bind(this);\n        this.handleBackdropClick = this.handleBackdropClick.bind(this);\n        this.handleTouchStart = this.handleTouchStart.bind(this);\n        this.handleTouchEnd = this.handleTouchEnd.bind(this);\n        this.handleImageClick = this.handleImageClick.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n    }\n    connectedCallback() {\n        this.render();\n        this.initializeImageListeners();\n        this.addLightboxHint();\n        // Add resize listener for responsive behavior\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n    disconnectedCallback() {\n        // Clean up event listeners\n        window.removeEventListener(\"resize\", this.handleResize);\n        this.removeImageListeners();\n        // Remove global listeners if lightbox is open\n        if (this.isOpen) document.removeEventListener(\"keydown\", this.handleKeydown);\n    }\n    render() {\n        this.shadowRoot.innerHTML = /*html*/ `\n      <style>\n        /* language=CSS */\n\n        .lightbox {\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background: var(--lightbox-bg);\n          z-index: var(--lightbox-z-index);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          opacity: 0;\n          visibility: hidden;\n          transition: var(--lightbox-transition);\n          padding: var(--space-m);\n          box-sizing: border-box;\n        }\n\n        .lightbox--open {\n          opacity: 1;\n          visibility: visible;\n        }\n\n        .lightbox__container {\n          position: relative;\n          max-width: 90vw;\n          max-height: 90vh;\n          display: flex;\n          flex-direction: column;\n          transform: scale(0.8);\n          transition: var(--lightbox-transition);\n        }\n\n        .lightbox--open .lightbox__container {\n          transform: scale(1);\n        }\n\n        .lightbox__image {\n          max-width: 100%;\n          max-height: calc(90vh - 4rem); /* Reserve space for caption */\n          object-fit: contain;\n          border-radius: var(--border-radius-sm);\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n        }\n\n        .lightbox__caption {\n            font-size: var(--size-step--1);\n            color: var(--color-surface);\n            margin-top: var(--space-xs);\n            margin-left: var(--space-xs);\n            font-style: italic;\n            line-height: var(--leading);\n            text-align: center;\n        }\n\n        .lightbox__caption:empty {\n          display: none;\n        }\n\n        .lightbox__instructions {\n          position: absolute;\n          left: -10000px;\n          width: 1px;\n          height: 1px;\n          overflow: hidden;\n          clip: rect(0, 0, 0, 0);\n          clip-path: inset(50%);\n          white-space: nowrap;\n        }\n\n        /* Navigation buttons */\n        .lightbox__nav {\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n          width: var(--touch-target-min);\n          height: var(--touch-target-min);\n          background: var(--button-bg);\n          border: none;\n          border-radius: 50%;\n          color: var(--button-color);\n          cursor: var(--button-cursor);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 1.5rem;\n          font-weight: bold;\n          transition: var(--button-transition);\n          backdrop-filter: blur(4px);\n          -webkit-backdrop-filter: blur(4px);\n        }\n\n        .lightbox__nav:hover {\n          background: var(--button-bg-hover);\n          transform: translateY(-50%) scale(1.1);\n        }\n\n        .lightbox__nav:focus {\n          outline: var(--focus-outline);\n          outline-offset: var(--focus-outline-offset);\n        }\n\n        .lightbox__nav:disabled {\n          opacity: var(--disabled-opacity);\n          cursor: var(--disabled-cursor);\n        }\n\n        .lightbox__nav:disabled:hover {\n          transform: translateY(-50%) scale(1);\n          background: var(--button-bg);\n        }\n\n        .lightbox__nav--prev {\n          left: var(--space-m);\n        }\n\n        .lightbox__nav--next {\n          right: var(--space-m);\n        }\n\n        .lightbox__nav--single {\n          display: none;\n        }\n\n        /* Close button */\n        .lightbox__close {\n          position: absolute;\n          top: var(--space-m);\n          right: var(--space-m);\n          width: var(--touch-target-min);\n          height: var(--touch-target-min);\n          background: var(--button-bg);\n          border: none;\n          border-radius: 50%;\n          color: var(--button-color);\n          cursor: var(--button-cursor);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 1.5rem;\n          font-weight: bold;\n          transition: var(--button-transition);\n          backdrop-filter: blur(4px);\n          -webkit-backdrop-filter: blur(4px);\n        }\n\n        .lightbox__close:hover {\n          background: var(--button-bg-hover);\n          transform: scale(1.1);\n        }\n\n        .lightbox__close:focus {\n          outline: var(--focus-outline);\n          outline-offset: var(--focus-outline-offset);\n        }\n\n        /* Mobile responsiveness */\n        @media (max-width: 768px) {\n          .lightbox {\n            padding: var(--space-s);\n          }\n\n          .lightbox__container {\n            max-width: 95vw;\n            max-height: 95vh;\n          }\n\n          .lightbox__image {\n            max-height: calc(95vh - 3rem);\n          }\n\n          .lightbox__nav {\n            width: var(--touch-target-small);\n            height: var(--touch-target-small);\n            font-size: 1.2rem;\n          }\n\n          .lightbox__close {\n            width: var(--touch-target-small);\n            height: var(--touch-target-small);\n            font-size: 1.2rem;\n          }\n\n          .lightbox__nav--prev {\n            left: var(--space-s);\n          }\n\n          .lightbox__nav--next {\n            right: var(--space-s);\n          }\n\n          .lightbox__close {\n            top: var(--space-s);\n            right: var(--space-s);\n          }\n        }\n\n        /* Loading state */\n        .lightbox__image--loading {\n          opacity: 0.5;\n        }\n\n        /* Prefers reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n          .lightbox,\n          .lightbox__container,\n          .lightbox__nav,\n          .lightbox__close {\n            transition: none;\n          }\n        }\n\n        /* High contrast mode support */\n        @media (prefers-contrast: high) {\n          .lightbox__nav,\n          .lightbox__close {\n            background: rgba(255, 255, 255, 0.95);\n            color: #000000;\n            border: 2px solid #000000;\n          }\n\n          .lightbox__caption {\n            background: rgba(0, 0, 0, 0.95);\n            color: #ffffff;\n            padding: var(--space-xs);\n            border-radius: var(--border-radius-sm);\n          }\n\n          .lightbox {\n            background: rgba(0, 0, 0, 0.95);\n          }\n        }\n\n        /* Ensure minimum contrast ratios */\n        .lightbox__nav,\n        .lightbox__close {\n          background: rgba(0, 0, 0, 0.8);\n          color: #ffffff;\n        }\n\n        .lightbox__nav:hover,\n        .lightbox__close:hover {\n          background: rgba(0, 0, 0, 0.9);\n        }\n\n        .lightbox__nav:focus,\n        .lightbox__close:focus {\n          background: rgba(0, 0, 0, 0.9);\n          outline: 3px solid #ffffff;\n          outline-offset: 2px;\n        }\n      </style>\n\n      <div class=\"lightbox\" role=\"dialog\" aria-modal=\"true\" aria-hidden=\"true\" aria-labelledby=\"lightbox-caption\" aria-describedby=\"lightbox-instructions\">\n        <div class=\"lightbox__container\">\n          <button class=\"lightbox__close\" type=\"button\" aria-label=\"Close lightbox (Escape key)\">\n            \\u{2715}\n          </button>\n          \n          <button class=\"lightbox__nav lightbox__nav--prev\" type=\"button\" aria-label=\"Previous image (Left arrow key)\">\n            \\u{2039}\n          </button>\n          \n          <img class=\"lightbox__image\" alt=\"Lightbox image placeholder\" role=\"img\" />\n          \n          <button class=\"lightbox__nav lightbox__nav--next\" type=\"button\" aria-label=\"Next image (Right arrow key)\">\n            \\u{203A}\n          </button>\n          \n          <p class=\"lightbox__caption\" id=\"lightbox-caption\"></p>\n          <div class=\"lightbox__instructions\" id=\"lightbox-instructions\" aria-live=\"polite\" aria-atomic=\"true\">\n            Use arrow keys to navigate between images, or Escape to close.\n          </div>\n        </div>\n      </div>\n    `;\n        // Get DOM references\n        this.lightboxEl = this.shadowRoot.querySelector(\".lightbox\");\n        this.containerEl = this.shadowRoot.querySelector(\".lightbox__container\");\n        this.imageEl = /** @type {HTMLImageElement} */ this.shadowRoot.querySelector(\".lightbox__image\");\n        this.captionEl = this.shadowRoot.querySelector(\".lightbox__caption\");\n        this.instructionsEl = this.shadowRoot.querySelector(\".lightbox__instructions\");\n        this.closeBtn = /** @type {HTMLButtonElement} */ this.shadowRoot.querySelector(\".lightbox__close\");\n        this.prevBtn = /** @type {HTMLButtonElement} */ this.shadowRoot.querySelector(\".lightbox__nav--prev\");\n        this.nextBtn = /** @type {HTMLButtonElement} */ this.shadowRoot.querySelector(\".lightbox__nav--next\");\n        // Add event listeners\n        this.lightboxEl.addEventListener(\"click\", this.handleBackdropClick);\n        this.closeBtn.addEventListener(\"click\", ()=>this.close());\n        this.prevBtn.addEventListener(\"click\", ()=>this.showPrevious());\n        this.nextBtn.addEventListener(\"click\", ()=>this.showNext());\n        // Touch events for mobile gestures\n        this.containerEl.addEventListener(\"touchstart\", this.handleTouchStart, {\n            passive: false\n        });\n        this.containerEl.addEventListener(\"touchend\", this.handleTouchEnd, {\n            passive: false\n        });\n    }\n    /**\n   * Add a visually hidden hint element for screen readers\n   */ addLightboxHint() {\n        // Check if hint element already exists\n        if (document.getElementById(\"lightbox-hint\")) return;\n        const hint = document.createElement(\"div\");\n        hint.id = \"lightbox-hint\";\n        hint.style.position = \"absolute\";\n        hint.style.left = \"-10000px\";\n        hint.style.width = \"1px\";\n        hint.style.height = \"1px\";\n        hint.style.overflow = \"hidden\";\n        hint.style.clip = \"rect(0, 0, 0, 0)\";\n        hint.style.clipPath = \"inset(50%)\";\n        hint.style.whiteSpace = \"nowrap\";\n        hint.textContent = \"Click or press Enter to view in lightbox\";\n        document.body.appendChild(hint);\n    }\n    /**\n   * Initialize click listeners on all images within the page\n   */ initializeImageListeners() {\n        // Find all images in figures that should be lightboxed\n        const figures = document.querySelectorAll(\"figure img.project__img, figure img.project-summary__image\");\n        figures.forEach((_img, index)=>{\n            const img = /** @type {HTMLImageElement} */ _img;\n            // Store image data\n            const figure = img.closest(\"figure\");\n            const caption = figure ? figure.querySelector(\"figcaption\") : null;\n            this.images.push({\n                src: img.src,\n                alt: img.alt,\n                caption: caption ? caption.textContent.trim() : \"\",\n                originalElement: img\n            });\n            // Add click listener\n            img.addEventListener(\"click\", (e)=>this.handleImageClick(e, index));\n            // Add visual indicator that image is clickable\n            img.style.cursor = \"pointer\";\n            img.setAttribute(\"role\", \"button\");\n            img.setAttribute(\"tabindex\", \"0\");\n            img.setAttribute(\"aria-label\", `View larger image: ${img.alt || \"Unlabeled image\"}`);\n            img.setAttribute(\"aria-describedby\", \"lightbox-hint\");\n            // Add keyboard support for image activation\n            img.addEventListener(\"keydown\", (e)=>{\n                const keyEvent = /** @type {KeyboardEvent} */ e;\n                if (keyEvent.key === \"Enter\" || keyEvent.key === \" \" || keyEvent.key === \"Space\") {\n                    e.preventDefault();\n                    this.handleImageClick(e, index);\n                }\n            });\n        });\n    }\n    /**\n   * Remove all image click listeners\n   */ removeImageListeners() {\n        this.images.forEach((imageData)=>{\n            if (imageData.originalElement) {\n                imageData.originalElement.removeEventListener(\"click\", this.handleImageClick);\n                imageData.originalElement.removeEventListener(\"keydown\", this.handleImageClick);\n                imageData.originalElement.style.cursor = \"\";\n                imageData.originalElement.removeAttribute(\"role\");\n                imageData.originalElement.removeAttribute(\"tabindex\");\n                imageData.originalElement.removeAttribute(\"aria-label\");\n            }\n        });\n    }\n    /**\n   * Handle image click events\n   */ handleImageClick(event, index) {\n        event.preventDefault();\n        this.open(index);\n    }\n    /**\n   * Handle backdrop clicks to close lightbox\n   */ handleBackdropClick(event) {\n        if (event.target === this.lightboxEl) this.close();\n    }\n    /**\n   * Handle keyboard navigation\n   */ handleKeydown(event) {\n        if (!this.isOpen) return;\n        switch(event.key){\n            case \"Escape\":\n                event.preventDefault();\n                this.close();\n                break;\n            case \"ArrowLeft\":\n                event.preventDefault();\n                this.showPrevious();\n                break;\n            case \"ArrowRight\":\n                event.preventDefault();\n                this.showNext();\n                break;\n            case \"Tab\":\n                // Trap focus within the lightbox\n                this.trapFocus(event);\n                break;\n            case \"Home\":\n                event.preventDefault();\n                if (this.images.length > 0) {\n                    this.loadImage(0);\n                    this.currentImageIndex = 0;\n                    this.updateNavigation();\n                    this.announceToScreenReader(`First image. Image 1 of ${this.images.length}.`);\n                }\n                break;\n            case \"End\":\n                event.preventDefault();\n                if (this.images.length > 0) {\n                    const lastIndex = this.images.length - 1;\n                    this.loadImage(lastIndex);\n                    this.currentImageIndex = lastIndex;\n                    this.updateNavigation();\n                    this.announceToScreenReader(`Last image. Image ${this.images.length} of ${this.images.length}.`);\n                }\n                break;\n        }\n    }\n    /**\n   * Trap focus within the lightbox for accessibility\n   */ trapFocus(event) {\n        const focusableElements = this.shadowRoot.querySelectorAll(\"button:not([disabled]), [tabindex]:not([tabindex=\\\"-1\\\"])\");\n        const firstFocusable = /** @type {HTMLElement} */ focusableElements[0];\n        const lastFocusable = /** @type {HTMLElement} */ focusableElements[focusableElements.length - 1];\n        if (event.shiftKey && document.activeElement === firstFocusable) {\n            event.preventDefault();\n            lastFocusable.focus();\n        } else if (!event.shiftKey && document.activeElement === lastFocusable) {\n            event.preventDefault();\n            firstFocusable.focus();\n        }\n    }\n    /**\n   * Handle touch start for mobile gestures\n   */ handleTouchStart(event) {\n        this.touchStartX = event.touches[0].clientX;\n        this.touchStartY = event.touches[0].clientY;\n    }\n    /**\n   * Handle touch end for mobile gestures\n   */ handleTouchEnd(event) {\n        if (!this.touchStartX || !this.touchStartY) return;\n        const touchEndX = event.changedTouches[0].clientX;\n        const touchEndY = event.changedTouches[0].clientY;\n        const deltaX = this.touchStartX - touchEndX;\n        const deltaY = this.touchStartY - touchEndY;\n        // Check if it's a horizontal swipe (not vertical scroll)\n        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > this.minSwipeDistance) {\n            if (deltaX > 0) // Swiped left - show next image\n            this.showNext();\n            else // Swiped right - show previous image\n            this.showPrevious();\n        }\n        // Reset touch coordinates\n        this.touchStartX = 0;\n        this.touchStartY = 0;\n    }\n    /**\n   * Handle window resize events\n   */ handleResize() {\n    // Could add logic here to adjust lightbox layout on resize if needed\n    }\n    /**\n   * Open the lightbox with a specific image\n   */ open(imageIndex = 0) {\n        if (this.images.length === 0) return;\n        this.currentImageIndex = Math.max(0, Math.min(imageIndex, this.images.length - 1));\n        this.isOpen = true;\n        // Store current focus element for restoration\n        this.originalFocusElement = document.activeElement;\n        // Prevent body scroll\n        document.body.style.overflow = \"hidden\";\n        // Show lightbox\n        this.lightboxEl.classList.add(\"lightbox--open\");\n        this.lightboxEl.setAttribute(\"aria-hidden\", \"false\");\n        // Load and display the image\n        this.loadImage(this.currentImageIndex);\n        // Update navigation buttons\n        this.updateNavigation();\n        // Add keyboard listener\n        document.addEventListener(\"keydown\", this.handleKeydown);\n        // Focus management - focus the close button\n        setTimeout(()=>{\n            /** @type {HTMLButtonElement} */ this.closeBtn.focus();\n        }, 100);\n        // Announce to screen readers with more detailed information\n        const totalImages = this.images.length;\n        const currentNum = this.currentImageIndex + 1;\n        const currentImage = this.images[this.currentImageIndex];\n        let announcement = `Lightbox opened. Viewing image ${currentNum} of ${totalImages}`;\n        if (currentImage.caption) announcement += `. Image caption: ${currentImage.caption}`;\n        if (totalImages > 1) announcement += \". Use arrow keys to navigate between images.\";\n        announcement += \" Press Escape to close.\";\n        this.announceToScreenReader(announcement);\n    }\n    /**\n   * Close the lightbox\n   */ close() {\n        if (!this.isOpen) return;\n        this.isOpen = false;\n        // Restore body scroll\n        document.body.style.overflow = \"\";\n        // Hide lightbox\n        this.lightboxEl.classList.remove(\"lightbox--open\");\n        this.lightboxEl.setAttribute(\"aria-hidden\", \"true\");\n        // Remove keyboard listener\n        document.removeEventListener(\"keydown\", this.handleKeydown);\n        // Restore focus\n        if (this.originalFocusElement) {\n            /** @type {HTMLElement} */ this.originalFocusElement.focus();\n            this.originalFocusElement = null;\n        }\n        // Announce to screen readers\n        this.announceToScreenReader(\"Lightbox closed.\");\n    }\n    /**\n   * Show the previous image\n   */ showPrevious() {\n        if (this.images.length <= 1) return;\n        const newIndex = this.currentImageIndex > 0 ? this.currentImageIndex - 1 : this.images.length - 1;\n        this.loadImage(newIndex);\n        this.currentImageIndex = newIndex;\n        this.updateNavigation();\n        // More descriptive announcement for screen readers\n        const currentImage = this.images[this.currentImageIndex];\n        let announcement = `Previous image. Now viewing image ${this.currentImageIndex + 1} of ${this.images.length}`;\n        if (currentImage.caption) announcement += `. ${currentImage.caption}`;\n        this.announceToScreenReader(announcement);\n    }\n    /**\n   * Show the next image\n   */ showNext() {\n        if (this.images.length <= 1) return;\n        const newIndex = this.currentImageIndex < this.images.length - 1 ? this.currentImageIndex + 1 : 0;\n        this.loadImage(newIndex);\n        this.currentImageIndex = newIndex;\n        this.updateNavigation();\n        // More descriptive announcement for screen readers\n        const currentImage = this.images[this.currentImageIndex];\n        let announcement = `Next image. Now viewing image ${this.currentImageIndex + 1} of ${this.images.length}`;\n        if (currentImage.caption) announcement += `. ${currentImage.caption}`;\n        this.announceToScreenReader(announcement);\n    }\n    /**\n   * Load an image by index\n   */ loadImage(index) {\n        if (!this.images[index]) return;\n        const imageData = this.images[index];\n        // Add loading state\n        this.imageEl.classList.add(\"lightbox__image--loading\");\n        // Create a new image to preload and check if it loads successfully\n        const tempImage = new Image();\n        tempImage.onload = ()=>{\n            // Only set the src after we know the image loads\n            this.imageEl.src = imageData.src;\n            this.imageEl.alt = imageData.alt || `Image ${index + 1} of ${this.images.length}`;\n            this.imageEl.classList.remove(\"lightbox__image--loading\");\n            // Update ARIA label for better context\n            this.imageEl.setAttribute(\"aria-label\", imageData.alt ? `${imageData.alt}. Image ${index + 1} of ${this.images.length}` : `Image ${index + 1} of ${this.images.length}`);\n        };\n        tempImage.onerror = ()=>{\n            console.warn(`Failed to load image: ${imageData.src}`);\n            // Still set the src and remove loading state to show broken image\n            this.imageEl.src = imageData.src;\n            this.imageEl.alt = imageData.alt;\n            this.imageEl.classList.remove(\"lightbox__image--loading\");\n            // Update ARIA label for error state\n            this.imageEl.setAttribute(\"aria-label\", `Failed to load image ${index + 1} of ${this.images.length}${imageData.alt ? `: ${imageData.alt}` : \"\"}`);\n            // Announce error to screen readers\n            this.announceToScreenReader(`Error loading image ${index + 1}. ${imageData.alt || \"No description available\"}.`);\n        };\n        // Start loading the image\n        tempImage.src = imageData.src;\n        // Update caption\n        this.captionEl.textContent = imageData.caption;\n    }\n    /**\n   * Update navigation button states\n   */ updateNavigation() {\n        const hasMultipleImages = this.images.length > 1;\n        // Show/hide navigation buttons based on image count\n        if (hasMultipleImages) {\n            this.prevBtn.classList.remove(\"lightbox__nav--single\");\n            this.nextBtn.classList.remove(\"lightbox__nav--single\");\n        } else {\n            this.prevBtn.classList.add(\"lightbox__nav--single\");\n            this.nextBtn.classList.add(\"lightbox__nav--single\");\n        }\n        // Update button states (for future implementation of linear navigation)\n        this.prevBtn.disabled = false; // Enable cycling\n        this.nextBtn.disabled = false; // Enable cycling\n    }\n    /**\n   * Announce messages to screen readers\n   * @param {string} message - The message to announce\n   * @param {string} priority - The aria-live priority ('polite' or 'assertive')\n   */ announceToScreenReader(message, priority = \"polite\") {\n        // Create a temporary element for screen reader announcements\n        const announcement = document.createElement(\"div\");\n        announcement.setAttribute(\"aria-live\", priority);\n        announcement.setAttribute(\"aria-atomic\", \"true\");\n        announcement.style.position = \"absolute\";\n        announcement.style.left = \"-10000px\";\n        announcement.style.width = \"1px\";\n        announcement.style.height = \"1px\";\n        announcement.style.overflow = \"hidden\";\n        announcement.style.clip = \"rect(0, 0, 0, 0)\";\n        announcement.style.clipPath = \"inset(50%)\";\n        announcement.style.whiteSpace = \"nowrap\";\n        document.body.appendChild(announcement);\n        // Add the message after a brief delay to ensure it's announced\n        setTimeout(()=>{\n            announcement.textContent = message;\n        }, 10);\n        // Remove the announcement element after a short delay\n        setTimeout(()=>{\n            if (announcement.parentNode) document.body.removeChild(announcement);\n        }, 1500);\n    }\n}\n// Register the custom element\ncustomElements.define(\"image-lightbox\", $1f8966d5bd745c7a$var$ImageLightbox);\nvar $1f8966d5bd745c7a$export$2e2bcd8739ae039 = $1f8966d5bd745c7a$var$ImageLightbox;\n\n});\n\n\n//# sourceMappingURL=ImageLightbox.f7bd941c.js.map\n","/**\n * ImageLightbox Web Component\n *\n * A accessible lightbox modal for viewing case study images in full size.\n * Supports keyboard navigation, touch gestures, and maintains WCAG 2.1 Level AA compliance.\n *\n * Features:\n * - Click on images to open in lightbox\n * - Keyboard navigation (ESC to close, arrow keys for navigation)\n * - Touch/swipe gestures on mobile\n * - Focus management for accessibility\n * - Image captions support\n * - Responsive design\n *\n * @extends HTMLElement\n */\nclass ImageLightbox extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n\n    // State management\n    this.isOpen = false;\n    this.currentImageIndex = 0;\n    this.images = [];\n    this.originalFocusElement = null;\n\n    // Touch handling for mobile gestures\n    this.touchStartX = 0;\n    this.touchStartY = 0;\n    this.minSwipeDistance = 50;\n\n    // Bind methods to preserve context\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.handleBackdropClick = this.handleBackdropClick.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.handleImageClick = this.handleImageClick.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  connectedCallback() {\n    this.render();\n    this.initializeImageListeners();\n    this.addLightboxHint();\n\n    // Add resize listener for responsive behavior\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  disconnectedCallback() {\n    // Clean up event listeners\n    window.removeEventListener(\"resize\", this.handleResize);\n    this.removeImageListeners();\n\n    // Remove global listeners if lightbox is open\n    if (this.isOpen) {\n      document.removeEventListener(\"keydown\", this.handleKeydown);\n    }\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = /*html*/ `\n      <style>\n        /* language=CSS */\n\n        .lightbox {\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background: var(--lightbox-bg);\n          z-index: var(--lightbox-z-index);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          opacity: 0;\n          visibility: hidden;\n          transition: var(--lightbox-transition);\n          padding: var(--space-m);\n          box-sizing: border-box;\n        }\n\n        .lightbox--open {\n          opacity: 1;\n          visibility: visible;\n        }\n\n        .lightbox__container {\n          position: relative;\n          max-width: 90vw;\n          max-height: 90vh;\n          display: flex;\n          flex-direction: column;\n          transform: scale(0.8);\n          transition: var(--lightbox-transition);\n        }\n\n        .lightbox--open .lightbox__container {\n          transform: scale(1);\n        }\n\n        .lightbox__image {\n          max-width: 100%;\n          max-height: calc(90vh - 4rem); /* Reserve space for caption */\n          object-fit: contain;\n          border-radius: var(--border-radius-sm);\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n        }\n\n        .lightbox__caption {\n            font-size: var(--size-step--1);\n            color: var(--color-surface);\n            margin-top: var(--space-xs);\n            margin-left: var(--space-xs);\n            font-style: italic;\n            line-height: var(--leading);\n            text-align: center;\n        }\n\n        .lightbox__caption:empty {\n          display: none;\n        }\n\n        .lightbox__instructions {\n          position: absolute;\n          left: -10000px;\n          width: 1px;\n          height: 1px;\n          overflow: hidden;\n          clip: rect(0, 0, 0, 0);\n          clip-path: inset(50%);\n          white-space: nowrap;\n        }\n\n        /* Navigation buttons */\n        .lightbox__nav {\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n          width: var(--touch-target-min);\n          height: var(--touch-target-min);\n          background: var(--button-bg);\n          border: none;\n          border-radius: 50%;\n          color: var(--button-color);\n          cursor: var(--button-cursor);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 1.5rem;\n          font-weight: bold;\n          transition: var(--button-transition);\n          backdrop-filter: blur(4px);\n          -webkit-backdrop-filter: blur(4px);\n        }\n\n        .lightbox__nav:hover {\n          background: var(--button-bg-hover);\n          transform: translateY(-50%) scale(1.1);\n        }\n\n        .lightbox__nav:focus {\n          outline: var(--focus-outline);\n          outline-offset: var(--focus-outline-offset);\n        }\n\n        .lightbox__nav:disabled {\n          opacity: var(--disabled-opacity);\n          cursor: var(--disabled-cursor);\n        }\n\n        .lightbox__nav:disabled:hover {\n          transform: translateY(-50%) scale(1);\n          background: var(--button-bg);\n        }\n\n        .lightbox__nav--prev {\n          left: var(--space-m);\n        }\n\n        .lightbox__nav--next {\n          right: var(--space-m);\n        }\n\n        .lightbox__nav--single {\n          display: none;\n        }\n\n        /* Close button */\n        .lightbox__close {\n          position: absolute;\n          top: var(--space-m);\n          right: var(--space-m);\n          width: var(--touch-target-min);\n          height: var(--touch-target-min);\n          background: var(--button-bg);\n          border: none;\n          border-radius: 50%;\n          color: var(--button-color);\n          cursor: var(--button-cursor);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 1.5rem;\n          font-weight: bold;\n          transition: var(--button-transition);\n          backdrop-filter: blur(4px);\n          -webkit-backdrop-filter: blur(4px);\n        }\n\n        .lightbox__close:hover {\n          background: var(--button-bg-hover);\n          transform: scale(1.1);\n        }\n\n        .lightbox__close:focus {\n          outline: var(--focus-outline);\n          outline-offset: var(--focus-outline-offset);\n        }\n\n        /* Mobile responsiveness */\n        @media (max-width: 768px) {\n          .lightbox {\n            padding: var(--space-s);\n          }\n\n          .lightbox__container {\n            max-width: 95vw;\n            max-height: 95vh;\n          }\n\n          .lightbox__image {\n            max-height: calc(95vh - 3rem);\n          }\n\n          .lightbox__nav {\n            width: var(--touch-target-small);\n            height: var(--touch-target-small);\n            font-size: 1.2rem;\n          }\n\n          .lightbox__close {\n            width: var(--touch-target-small);\n            height: var(--touch-target-small);\n            font-size: 1.2rem;\n          }\n\n          .lightbox__nav--prev {\n            left: var(--space-s);\n          }\n\n          .lightbox__nav--next {\n            right: var(--space-s);\n          }\n\n          .lightbox__close {\n            top: var(--space-s);\n            right: var(--space-s);\n          }\n        }\n\n        /* Loading state */\n        .lightbox__image--loading {\n          opacity: 0.5;\n        }\n\n        /* Prefers reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n          .lightbox,\n          .lightbox__container,\n          .lightbox__nav,\n          .lightbox__close {\n            transition: none;\n          }\n        }\n\n        /* High contrast mode support */\n        @media (prefers-contrast: high) {\n          .lightbox__nav,\n          .lightbox__close {\n            background: rgba(255, 255, 255, 0.95);\n            color: #000000;\n            border: 2px solid #000000;\n          }\n\n          .lightbox__caption {\n            background: rgba(0, 0, 0, 0.95);\n            color: #ffffff;\n            padding: var(--space-xs);\n            border-radius: var(--border-radius-sm);\n          }\n\n          .lightbox {\n            background: rgba(0, 0, 0, 0.95);\n          }\n        }\n\n        /* Ensure minimum contrast ratios */\n        .lightbox__nav,\n        .lightbox__close {\n          background: rgba(0, 0, 0, 0.8);\n          color: #ffffff;\n        }\n\n        .lightbox__nav:hover,\n        .lightbox__close:hover {\n          background: rgba(0, 0, 0, 0.9);\n        }\n\n        .lightbox__nav:focus,\n        .lightbox__close:focus {\n          background: rgba(0, 0, 0, 0.9);\n          outline: 3px solid #ffffff;\n          outline-offset: 2px;\n        }\n      </style>\n\n      <div class=\"lightbox\" role=\"dialog\" aria-modal=\"true\" aria-hidden=\"true\" aria-labelledby=\"lightbox-caption\" aria-describedby=\"lightbox-instructions\">\n        <div class=\"lightbox__container\">\n          <button class=\"lightbox__close\" type=\"button\" aria-label=\"Close lightbox (Escape key)\">\n            ✕\n          </button>\n          \n          <button class=\"lightbox__nav lightbox__nav--prev\" type=\"button\" aria-label=\"Previous image (Left arrow key)\">\n            ‹\n          </button>\n          \n          <img class=\"lightbox__image\" alt=\"Lightbox image placeholder\" role=\"img\" />\n          \n          <button class=\"lightbox__nav lightbox__nav--next\" type=\"button\" aria-label=\"Next image (Right arrow key)\">\n            ›\n          </button>\n          \n          <p class=\"lightbox__caption\" id=\"lightbox-caption\"></p>\n          <div class=\"lightbox__instructions\" id=\"lightbox-instructions\" aria-live=\"polite\" aria-atomic=\"true\">\n            Use arrow keys to navigate between images, or Escape to close.\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Get DOM references\n    this.lightboxEl = this.shadowRoot.querySelector(\".lightbox\");\n    this.containerEl = this.shadowRoot.querySelector(\".lightbox__container\");\n    this.imageEl = /** @type {HTMLImageElement} */ (\n      this.shadowRoot.querySelector(\".lightbox__image\")\n    );\n    this.captionEl = this.shadowRoot.querySelector(\".lightbox__caption\");\n    this.instructionsEl = this.shadowRoot.querySelector(\n      \".lightbox__instructions\"\n    );\n    this.closeBtn = /** @type {HTMLButtonElement} */ (\n      this.shadowRoot.querySelector(\".lightbox__close\")\n    );\n    this.prevBtn = /** @type {HTMLButtonElement} */ (\n      this.shadowRoot.querySelector(\".lightbox__nav--prev\")\n    );\n    this.nextBtn = /** @type {HTMLButtonElement} */ (\n      this.shadowRoot.querySelector(\".lightbox__nav--next\")\n    );\n\n    // Add event listeners\n    this.lightboxEl.addEventListener(\"click\", this.handleBackdropClick);\n    this.closeBtn.addEventListener(\"click\", () => this.close());\n    this.prevBtn.addEventListener(\"click\", () => this.showPrevious());\n    this.nextBtn.addEventListener(\"click\", () => this.showNext());\n\n    // Touch events for mobile gestures\n    this.containerEl.addEventListener(\"touchstart\", this.handleTouchStart, {\n      passive: false,\n    });\n    this.containerEl.addEventListener(\"touchend\", this.handleTouchEnd, {\n      passive: false,\n    });\n  }\n\n  /**\n   * Add a visually hidden hint element for screen readers\n   */\n  addLightboxHint() {\n    // Check if hint element already exists\n    if (document.getElementById(\"lightbox-hint\")) {return;}\n\n    const hint = document.createElement(\"div\");\n    hint.id = \"lightbox-hint\";\n    hint.style.position = \"absolute\";\n    hint.style.left = \"-10000px\";\n    hint.style.width = \"1px\";\n    hint.style.height = \"1px\";\n    hint.style.overflow = \"hidden\";\n    hint.style.clip = \"rect(0, 0, 0, 0)\";\n    hint.style.clipPath = \"inset(50%)\";\n    hint.style.whiteSpace = \"nowrap\";\n    hint.textContent = \"Click or press Enter to view in lightbox\";\n\n    document.body.appendChild(hint);\n  }\n\n  /**\n   * Initialize click listeners on all images within the page\n   */\n  initializeImageListeners() {\n    // Find all images in figures that should be lightboxed\n    const figures = document.querySelectorAll(\n      \"figure img.project__img, figure img.project-summary__image\"\n    );\n\n    figures.forEach((_img, index) => {\n      const img = /** @type {HTMLImageElement} */ (_img);\n      // Store image data\n      const figure = img.closest(\"figure\");\n      const caption = figure ? figure.querySelector(\"figcaption\") : null;\n\n      this.images.push({\n        src: img.src,\n        alt: img.alt,\n        caption: caption ? caption.textContent.trim() : \"\",\n        originalElement: img,\n      });\n\n      // Add click listener\n      img.addEventListener(\"click\", (e) => this.handleImageClick(e, index));\n\n      // Add visual indicator that image is clickable\n      img.style.cursor = \"pointer\";\n      img.setAttribute(\"role\", \"button\");\n      img.setAttribute(\"tabindex\", \"0\");\n      img.setAttribute(\n        \"aria-label\",\n        `View larger image: ${img.alt || \"Unlabeled image\"}`\n      );\n      img.setAttribute(\"aria-describedby\", \"lightbox-hint\");\n\n      // Add keyboard support for image activation\n      img.addEventListener(\"keydown\", (e) => {\n        const keyEvent = /** @type {KeyboardEvent} */ (e);\n        if (\n          keyEvent.key === \"Enter\" ||\n          keyEvent.key === \" \" ||\n          keyEvent.key === \"Space\"\n        ) {\n          e.preventDefault();\n          this.handleImageClick(e, index);\n        }\n      });\n    });\n  }\n\n  /**\n   * Remove all image click listeners\n   */\n  removeImageListeners() {\n    this.images.forEach((imageData) => {\n      if (imageData.originalElement) {\n        imageData.originalElement.removeEventListener(\n          \"click\",\n          this.handleImageClick\n        );\n        imageData.originalElement.removeEventListener(\n          \"keydown\",\n          this.handleImageClick\n        );\n        imageData.originalElement.style.cursor = \"\";\n        imageData.originalElement.removeAttribute(\"role\");\n        imageData.originalElement.removeAttribute(\"tabindex\");\n        imageData.originalElement.removeAttribute(\"aria-label\");\n      }\n    });\n  }\n\n  /**\n   * Handle image click events\n   */\n  handleImageClick(event, index) {\n    event.preventDefault();\n    this.open(index);\n  }\n\n  /**\n   * Handle backdrop clicks to close lightbox\n   */\n  handleBackdropClick(event) {\n    if (event.target === this.lightboxEl) {\n      this.close();\n    }\n  }\n\n  /**\n   * Handle keyboard navigation\n   */\n  handleKeydown(event) {\n    if (!this.isOpen) {return;}\n\n    switch (event.key) {\n      case \"Escape\":\n        event.preventDefault();\n        this.close();\n        break;\n      case \"ArrowLeft\":\n        event.preventDefault();\n        this.showPrevious();\n        break;\n      case \"ArrowRight\":\n        event.preventDefault();\n        this.showNext();\n        break;\n      case \"Tab\":\n        // Trap focus within the lightbox\n        this.trapFocus(event);\n        break;\n      case \"Home\":\n        event.preventDefault();\n        if (this.images.length > 0) {\n          this.loadImage(0);\n          this.currentImageIndex = 0;\n          this.updateNavigation();\n          this.announceToScreenReader(\n            `First image. Image 1 of ${this.images.length}.`\n          );\n        }\n        break;\n      case \"End\":\n        event.preventDefault();\n        if (this.images.length > 0) {\n          const lastIndex = this.images.length - 1;\n          this.loadImage(lastIndex);\n          this.currentImageIndex = lastIndex;\n          this.updateNavigation();\n          this.announceToScreenReader(\n            `Last image. Image ${this.images.length} of ${this.images.length}.`\n          );\n        }\n        break;\n    }\n  }\n\n  /**\n   * Trap focus within the lightbox for accessibility\n   */\n  trapFocus(event) {\n    const focusableElements = this.shadowRoot.querySelectorAll(\n      \"button:not([disabled]), [tabindex]:not([tabindex=\\\"-1\\\"])\"\n    );\n    const firstFocusable = /** @type {HTMLElement} */ (focusableElements[0]);\n    const lastFocusable = /** @type {HTMLElement} */ (\n      focusableElements[focusableElements.length - 1]\n    );\n\n    if (event.shiftKey && document.activeElement === firstFocusable) {\n      event.preventDefault();\n      lastFocusable.focus();\n    } else if (!event.shiftKey && document.activeElement === lastFocusable) {\n      event.preventDefault();\n      firstFocusable.focus();\n    }\n  }\n\n  /**\n   * Handle touch start for mobile gestures\n   */\n  handleTouchStart(event) {\n    this.touchStartX = event.touches[0].clientX;\n    this.touchStartY = event.touches[0].clientY;\n  }\n\n  /**\n   * Handle touch end for mobile gestures\n   */\n  handleTouchEnd(event) {\n    if (!this.touchStartX || !this.touchStartY) {return;}\n\n    const touchEndX = event.changedTouches[0].clientX;\n    const touchEndY = event.changedTouches[0].clientY;\n    const deltaX = this.touchStartX - touchEndX;\n    const deltaY = this.touchStartY - touchEndY;\n\n    // Check if it's a horizontal swipe (not vertical scroll)\n    if (\n      Math.abs(deltaX) > Math.abs(deltaY) &&\n      Math.abs(deltaX) > this.minSwipeDistance\n    ) {\n      if (deltaX > 0) {\n        // Swiped left - show next image\n        this.showNext();\n      } else {\n        // Swiped right - show previous image\n        this.showPrevious();\n      }\n    }\n\n    // Reset touch coordinates\n    this.touchStartX = 0;\n    this.touchStartY = 0;\n  }\n\n  /**\n   * Handle window resize events\n   */\n  handleResize() {\n    // Could add logic here to adjust lightbox layout on resize if needed\n  }\n\n  /**\n   * Open the lightbox with a specific image\n   */\n  open(imageIndex = 0) {\n    if (this.images.length === 0) {return;}\n\n    this.currentImageIndex = Math.max(\n      0,\n      Math.min(imageIndex, this.images.length - 1)\n    );\n    this.isOpen = true;\n\n    // Store current focus element for restoration\n    this.originalFocusElement = document.activeElement;\n\n    // Prevent body scroll\n    document.body.style.overflow = \"hidden\";\n\n    // Show lightbox\n    this.lightboxEl.classList.add(\"lightbox--open\");\n    this.lightboxEl.setAttribute(\"aria-hidden\", \"false\");\n\n    // Load and display the image\n    this.loadImage(this.currentImageIndex);\n\n    // Update navigation buttons\n    this.updateNavigation();\n\n    // Add keyboard listener\n    document.addEventListener(\"keydown\", this.handleKeydown);\n\n    // Focus management - focus the close button\n    setTimeout(() => {\n      /** @type {HTMLButtonElement} */ (this.closeBtn).focus();\n    }, 100);\n\n    // Announce to screen readers with more detailed information\n    const totalImages = this.images.length;\n    const currentNum = this.currentImageIndex + 1;\n    const currentImage = this.images[this.currentImageIndex];\n\n    let announcement = `Lightbox opened. Viewing image ${currentNum} of ${totalImages}`;\n    if (currentImage.caption) {\n      announcement += `. Image caption: ${currentImage.caption}`;\n    }\n    if (totalImages > 1) {\n      announcement += \". Use arrow keys to navigate between images.\";\n    }\n    announcement += \" Press Escape to close.\";\n\n    this.announceToScreenReader(announcement);\n  }\n\n  /**\n   * Close the lightbox\n   */\n  close() {\n    if (!this.isOpen) {return;}\n\n    this.isOpen = false;\n\n    // Restore body scroll\n    document.body.style.overflow = \"\";\n\n    // Hide lightbox\n    this.lightboxEl.classList.remove(\"lightbox--open\");\n    this.lightboxEl.setAttribute(\"aria-hidden\", \"true\");\n\n    // Remove keyboard listener\n    document.removeEventListener(\"keydown\", this.handleKeydown);\n\n    // Restore focus\n    if (this.originalFocusElement) {\n      /** @type {HTMLElement} */ (this.originalFocusElement).focus();\n      this.originalFocusElement = null;\n    }\n\n    // Announce to screen readers\n    this.announceToScreenReader(\"Lightbox closed.\");\n  }\n\n  /**\n   * Show the previous image\n   */\n  showPrevious() {\n    if (this.images.length <= 1) {return;}\n\n    const newIndex =\n      this.currentImageIndex > 0\n        ? this.currentImageIndex - 1\n        : this.images.length - 1;\n\n    this.loadImage(newIndex);\n    this.currentImageIndex = newIndex;\n    this.updateNavigation();\n\n    // More descriptive announcement for screen readers\n    const currentImage = this.images[this.currentImageIndex];\n    let announcement = `Previous image. Now viewing image ${\n      this.currentImageIndex + 1\n    } of ${this.images.length}`;\n    if (currentImage.caption) {\n      announcement += `. ${currentImage.caption}`;\n    }\n    this.announceToScreenReader(announcement);\n  }\n\n  /**\n   * Show the next image\n   */\n  showNext() {\n    if (this.images.length <= 1) {return;}\n\n    const newIndex =\n      this.currentImageIndex < this.images.length - 1\n        ? this.currentImageIndex + 1\n        : 0;\n\n    this.loadImage(newIndex);\n    this.currentImageIndex = newIndex;\n    this.updateNavigation();\n\n    // More descriptive announcement for screen readers\n    const currentImage = this.images[this.currentImageIndex];\n    let announcement = `Next image. Now viewing image ${\n      this.currentImageIndex + 1\n    } of ${this.images.length}`;\n    if (currentImage.caption) {\n      announcement += `. ${currentImage.caption}`;\n    }\n    this.announceToScreenReader(announcement);\n  }\n\n  /**\n   * Load an image by index\n   */\n  loadImage(index) {\n    if (!this.images[index]) {return;}\n\n    const imageData = this.images[index];\n\n    // Add loading state\n    this.imageEl.classList.add(\"lightbox__image--loading\");\n\n    // Create a new image to preload and check if it loads successfully\n    const tempImage = new Image();\n\n    tempImage.onload = () => {\n      // Only set the src after we know the image loads\n      this.imageEl.src = imageData.src;\n      this.imageEl.alt =\n        imageData.alt || `Image ${index + 1} of ${this.images.length}`;\n      this.imageEl.classList.remove(\"lightbox__image--loading\");\n\n      // Update ARIA label for better context\n      this.imageEl.setAttribute(\n        \"aria-label\",\n        imageData.alt\n          ? `${imageData.alt}. Image ${index + 1} of ${this.images.length}`\n          : `Image ${index + 1} of ${this.images.length}`\n      );\n    };\n\n    tempImage.onerror = () => {\n      console.warn(`Failed to load image: ${imageData.src}`);\n      // Still set the src and remove loading state to show broken image\n      this.imageEl.src = imageData.src;\n      this.imageEl.alt = imageData.alt;\n      this.imageEl.classList.remove(\"lightbox__image--loading\");\n\n      // Update ARIA label for error state\n      this.imageEl.setAttribute(\n        \"aria-label\",\n        `Failed to load image ${index + 1} of ${this.images.length}${\n          imageData.alt ? `: ${imageData.alt}` : \"\"\n        }`\n      );\n\n      // Announce error to screen readers\n      this.announceToScreenReader(\n        `Error loading image ${index + 1}. ${\n          imageData.alt || \"No description available\"\n        }.`\n      );\n    };\n\n    // Start loading the image\n    tempImage.src = imageData.src;\n\n    // Update caption\n    this.captionEl.textContent = imageData.caption;\n  }\n\n  /**\n   * Update navigation button states\n   */\n  updateNavigation() {\n    const hasMultipleImages = this.images.length > 1;\n\n    // Show/hide navigation buttons based on image count\n    if (hasMultipleImages) {\n      this.prevBtn.classList.remove(\"lightbox__nav--single\");\n      this.nextBtn.classList.remove(\"lightbox__nav--single\");\n    } else {\n      this.prevBtn.classList.add(\"lightbox__nav--single\");\n      this.nextBtn.classList.add(\"lightbox__nav--single\");\n    }\n\n    // Update button states (for future implementation of linear navigation)\n    this.prevBtn.disabled = false; // Enable cycling\n    this.nextBtn.disabled = false; // Enable cycling\n  }\n\n  /**\n   * Announce messages to screen readers\n   * @param {string} message - The message to announce\n   * @param {string} priority - The aria-live priority ('polite' or 'assertive')\n   */\n  announceToScreenReader(message, priority = \"polite\") {\n    // Create a temporary element for screen reader announcements\n    const announcement = document.createElement(\"div\");\n    announcement.setAttribute(\"aria-live\", priority);\n    announcement.setAttribute(\"aria-atomic\", \"true\");\n    announcement.style.position = \"absolute\";\n    announcement.style.left = \"-10000px\";\n    announcement.style.width = \"1px\";\n    announcement.style.height = \"1px\";\n    announcement.style.overflow = \"hidden\";\n    announcement.style.clip = \"rect(0, 0, 0, 0)\";\n    announcement.style.clipPath = \"inset(50%)\";\n    announcement.style.whiteSpace = \"nowrap\";\n\n    document.body.appendChild(announcement);\n\n    // Add the message after a brief delay to ensure it's announced\n    setTimeout(() => {\n      announcement.textContent = message;\n    }, 10);\n\n    // Remove the announcement element after a short delay\n    setTimeout(() => {\n      if (announcement.parentNode) {\n        document.body.removeChild(announcement);\n      }\n    }, 1500);\n  }\n}\n\n// Register the custom element\ncustomElements.define(\"image-lightbox\", ImageLightbox);\n\nexport default ImageLightbox;\n"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","value","configurable","get","$1f8966d5bd745c7a$export$2e2bcd8739ae039","set","s","enumerable","$1f8966d5bd745c7a$var$ImageLightbox","HTMLElement","attachShadow","mode","isOpen","currentImageIndex","images","originalFocusElement","touchStartX","touchStartY","minSwipeDistance","handleKeydown","bind","handleBackdropClick","handleTouchStart","handleTouchEnd","handleImageClick","handleResize","connectedCallback","render","initializeImageListeners","addLightboxHint","addEventListener","disconnectedCallback","removeEventListener","removeImageListeners","document","shadowRoot","innerHTML","lightboxEl","querySelector","containerEl","imageEl","captionEl","instructionsEl","closeBtn","prevBtn","nextBtn","close","showPrevious","showNext","passive","getElementById","hint","createElement","id","style","position","left","width","height","overflow","clip","clipPath","whiteSpace","textContent","body","appendChild","figures","querySelectorAll","forEach","_img","index","figure","img","closest","caption","push","src","alt","trim","originalElement","e","cursor","setAttribute","keyEvent","key","preventDefault","imageData","removeAttribute","event","open","target","trapFocus","length","loadImage","updateNavigation","announceToScreenReader","lastIndex","focusableElements","firstFocusable","lastFocusable","shiftKey","activeElement","focus","touches","clientX","clientY","touchEndX","changedTouches","touchEndY","deltaX","Math","abs","imageIndex","max","min","classList","add","setTimeout","totalImages","currentNum","currentImage","announcement","remove","newIndex","tempImage","Image","onload","onerror","console","warn","disabled","message","priority","parentNode","removeChild","customElements","define"],"version":3,"file":"ImageLightbox.f7bd941c.js.map"}