let CACHE_NAME="portfolio-v1.0.0",STATIC_CACHE="portfolio-static-v1.0.0",IMAGE_CACHE="portfolio-images-v1.0.0",FONT_CACHE="portfolio-fonts-v1.0.0",STATIC_ASSETS=["/","/index.html","/work.html","/contact.html","/css/main.css","/js/main.js","/js/enhanced-image-loader.js","/js/analytics/simple-analytics.js","/assets/favicons/favicon.ico","/assets/favicons/apple-icon.png"];async function handlePageRequest(e){try{let t=await fetch(e);if(t.ok)return(await caches.open(CACHE_NAME)).put(e,t.clone()),t}catch(t){console.warn("[Service Worker] Network failed, trying cache for:",e.url)}let t=await caches.match(e);return t||caches.match("/offline.html")||new Response("<h1>Offline</h1><p>This page is not available offline.</p>",{headers:{"Content-Type":"text/html"}})}async function handleImageRequest(e){let t=await caches.match(e);if(t)return t;try{let t=await fetch(e);return t.ok&&(await caches.open(IMAGE_CACHE)).put(e,t.clone()),t}catch(t){return console.warn("[Service Worker] Image fetch failed:",e.url),new Response("",{status:404})}}async function handleFontRequest(e){let t=await caches.match(e);if(t)return t;try{let t=await fetch(e);return t.ok&&(await caches.open(FONT_CACHE)).put(e,t.clone()),t}catch(t){return console.warn("[Service Worker] Font fetch failed:",e.url),new Response("",{status:404})}}async function handleStaticRequest(e){let t=await caches.match(e);if(t)return t;try{let t=await fetch(e);return t.ok&&(await caches.open(STATIC_CACHE)).put(e,t.clone()),t}catch(t){return console.warn("[Service Worker] Static asset fetch failed:",e.url),new Response("",{status:404})}}function syncAnalyticsData(){console.warn("[Service Worker] Syncing analytics data")}self.addEventListener("install",e=>{console.warn("[Service Worker] Installing"),e.waitUntil(caches.open(STATIC_CACHE).then(e=>(console.warn("[Service Worker] Caching static assets"),e.addAll(STATIC_ASSETS))).then(()=>(console.warn("[Service Worker] Installation complete"),self.skipWaiting())).catch(e=>{console.error("[Service Worker] Installation failed:",e)}))}),self.addEventListener("activate",e=>{console.warn("[Service Worker] Activating"),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==STATIC_CACHE&&e!==IMAGE_CACHE&&e!==FONT_CACHE&&!e.startsWith(CACHE_NAME))return console.warn("[Service Worker] Deleting old cache:",e),caches.delete(e)}))).then(()=>(console.warn("[Service Worker] Activation complete"),self.clients.claim())))}),self.addEventListener("fetch",e=>{let{request:t}=e,n=new URL(t.url);"GET"===t.method&&(n.origin.includes(self.location.origin)||n.origin.includes("fonts.googleapis.com")||n.origin.includes("fonts.gstatic.com")||n.origin.includes("www.google-analytics.com")||n.origin.includes("www.googletagmanager.com"))&&("document"===t.destination?e.respondWith(handlePageRequest(t)):"image"===t.destination||n.pathname.match(/\.(jpg|jpeg|png|gif|webp|svg)$/)?e.respondWith(handleImageRequest(t)):"font"===t.destination||n.pathname.match(/\.(woff|woff2|ttf|eot)$/)?e.respondWith(handleFontRequest(t)):"script"===t.destination||"style"===t.destination?e.respondWith(handleStaticRequest(t)):e.respondWith(fetch(t)))}),self.addEventListener("message",e=>{e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting()}),"serviceWorker"in navigator&&"sync"in window.ServiceWorkerRegistration.prototype&&self.addEventListener("sync",e=>{"background-sync-analytics"===e.tag&&e.waitUntil(syncAnalyticsData())});
//# sourceMappingURL=service-worker.js.map
