{"mappings":"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","sources":["<anon>","src/js/components/sidebar-navigation/SidebarNavigation.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire9b4d\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"a6Is1\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", function () { return $75bcf1f3cba35570$export$2e2bcd8739ae039; });\n/**\n * Sidebar Navigation Component\n * Handles scroll spy functionality to highlight active navigation items\n * based on the current section in view.\n */ class $75bcf1f3cba35570$var$SidebarNavigation {\n    constructor(){\n        this.sidebarNav = document.querySelector(\".sidebar-nav\");\n        this.navLinks = [];\n        this.sections = [];\n        this.currentActiveLink = null;\n        this.observer = null;\n        this.init();\n    }\n    init() {\n        if (!this.sidebarNav) return; // No sidebar navigation found\n        this.setupNavLinks();\n        this.setupIntersectionObserver();\n        this.bindEvents();\n    }\n    setupNavLinks() {\n        // Get all navigation links\n        const links = this.sidebarNav.querySelectorAll(\"a[href^=\\\"#\\\"]\");\n        links.forEach((link)=>{\n            const targetId = link.getAttribute(\"href\").substring(1);\n            const targetSection = document.getElementById(targetId);\n            if (targetSection) {\n                this.navLinks.push({\n                    link: link,\n                    section: targetSection,\n                    id: targetId\n                });\n                this.sections.push(targetSection);\n            }\n        });\n    }\n    setupIntersectionObserver() {\n        // Create intersection observer to track when sections come into view\n        const options = {\n            root: null,\n            rootMargin: \"-20% 0px -60% 0px\",\n            threshold: 0\n        };\n        this.observer = new IntersectionObserver((entries)=>{\n            this.handleIntersection(entries);\n        }, options);\n        // Observe all sections\n        this.sections.forEach((section)=>{\n            this.observer.observe(section);\n        });\n    }\n    handleIntersection(entries) {\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) this.setActiveLink(entry.target.id);\n        });\n    }\n    setActiveLink(sectionId) {\n        // Remove active class from all links\n        this.navLinks.forEach(({ link: link })=>{\n            link.classList.remove(\"active\");\n        });\n        // Add active class to current link\n        const activeNavItem = this.navLinks.find(({ id: id })=>id === sectionId);\n        if (activeNavItem) {\n            activeNavItem.link.classList.add(\"active\");\n            this.currentActiveLink = activeNavItem.link;\n        }\n    }\n    bindEvents() {\n        // Smooth scroll when clicking navigation links\n        this.navLinks.forEach(({ link: link, section: section })=>{\n            link.addEventListener(\"click\", (e)=>{\n                e.preventDefault();\n                // Remove active from all links\n                this.navLinks.forEach(({ link: navLink })=>{\n                    navLink.classList.remove(\"active\");\n                });\n                // Add active to clicked link\n                link.classList.add(\"active\");\n                // Smooth scroll to section\n                section.scrollIntoView({\n                    behavior: \"smooth\",\n                    block: \"start\"\n                });\n            });\n        });\n        // Handle initial load - set active link based on URL hash\n        if (window.location.hash) {\n            const initialSection = window.location.hash.substring(1);\n            setTimeout(()=>{\n                this.setActiveLink(initialSection);\n            }, 100);\n        } else // If no hash, activate first link\n        setTimeout(()=>{\n            if (this.navLinks.length > 0) this.setActiveLink(this.navLinks[0].id);\n        }, 100);\n    }\n    destroy() {\n        if (this.observer) this.observer.disconnect();\n    }\n}\nvar $75bcf1f3cba35570$export$2e2bcd8739ae039 = $75bcf1f3cba35570$var$SidebarNavigation;\n\n});\n\n\n//# sourceMappingURL=SidebarNavigation.5d540665.js.map\n","/**\n * Sidebar Navigation Component\n * Handles scroll spy functionality to highlight active navigation items\n * based on the current section in view.\n */\n\nclass SidebarNavigation {\n  constructor() {\n    this.sidebarNav = document.querySelector(\".sidebar-nav\");\n    this.navLinks = [];\n    this.sections = [];\n    this.currentActiveLink = null;\n    this.observer = null;\n\n    this.init();\n  }\n\n  init() {\n    if (!this.sidebarNav) {\n      return; // No sidebar navigation found\n    }\n\n    this.setupNavLinks();\n    this.setupIntersectionObserver();\n    this.bindEvents();\n  }\n\n  setupNavLinks() {\n    // Get all navigation links\n    const links = this.sidebarNav.querySelectorAll(\"a[href^=\\\"#\\\"]\");\n    links.forEach((link) => {\n      const targetId = link.getAttribute(\"href\").substring(1);\n      const targetSection = document.getElementById(targetId);\n\n      if (targetSection) {\n        this.navLinks.push({\n          link: link,\n          section: targetSection,\n          id: targetId,\n        });\n        this.sections.push(targetSection);\n      }\n    });\n  }\n\n  setupIntersectionObserver() {\n    // Create intersection observer to track when sections come into view\n    const options = {\n      root: null,\n      rootMargin: \"-20% 0px -60% 0px\", // Trigger when section is 20% from top\n      threshold: 0,\n    };\n\n    this.observer = new IntersectionObserver((entries) => {\n      this.handleIntersection(entries);\n    }, options);\n\n    // Observe all sections\n    this.sections.forEach((section) => {\n      this.observer.observe(section);\n    });\n  }\n\n  handleIntersection(entries) {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        this.setActiveLink(entry.target.id);\n      }\n    });\n  }\n\n  setActiveLink(sectionId) {\n    // Remove active class from all links\n    this.navLinks.forEach(({ link }) => {\n      link.classList.remove(\"active\");\n    });\n\n    // Add active class to current link\n    const activeNavItem = this.navLinks.find(({ id }) => id === sectionId);\n    if (activeNavItem) {\n      activeNavItem.link.classList.add(\"active\");\n      this.currentActiveLink = activeNavItem.link;\n    }\n  }\n\n  bindEvents() {\n    // Smooth scroll when clicking navigation links\n    this.navLinks.forEach(({ link, section }) => {\n      link.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n\n        // Remove active from all links\n        this.navLinks.forEach(({ link: navLink }) => {\n          navLink.classList.remove(\"active\");\n        });\n\n        // Add active to clicked link\n        link.classList.add(\"active\");\n\n        // Smooth scroll to section\n        section.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"start\",\n        });\n      });\n    });\n\n    // Handle initial load - set active link based on URL hash\n    if (window.location.hash) {\n      const initialSection = window.location.hash.substring(1);\n      setTimeout(() => {\n        this.setActiveLink(initialSection);\n      }, 100);\n    } else {\n      // If no hash, activate first link\n      setTimeout(() => {\n        if (this.navLinks.length > 0) {\n          this.setActiveLink(this.navLinks[0].id);\n        }\n      }, 100);\n    }\n  }\n\n  destroy() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n}\n\nexport default SidebarNavigation;\n"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","value","configurable","get","$75bcf1f3cba35570$export$2e2bcd8739ae039","set","s","enumerable","sidebarNav","document","querySelector","navLinks","sections","currentActiveLink","observer","init","setupNavLinks","setupIntersectionObserver","bindEvents","links","querySelectorAll","forEach","link","targetId","getAttribute","substring","targetSection","getElementById","push","section","id","IntersectionObserver","entries","handleIntersection","root","rootMargin","threshold","observe","entry","isIntersecting","setActiveLink","target","sectionId","classList","remove","activeNavItem","find","add","addEventListener","e","preventDefault","navLink","scrollIntoView","behavior","block","location","hash","initialSection","setTimeout","length","destroy","disconnect"],"version":3,"file":"SidebarNavigation.5d540665.js.map"}