{"mappings":"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","sources":["<anon>","src/js/clarity-config.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire9b4d\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5efCn\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", function () { return $3cea5ff051169056$export$2e2bcd8739ae039; });\n/**\n * Microsoft Clarity Advanced Configuration\n * Enhanced tracking for conversion funnel analysis and user journey optimization\n */ // Microsoft Clarity tracking code with enhanced configuration\n(function(c, l, a, r, i, t, y) {\n    // Only load in production\n    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.port !== '') {\n        c[a] = ()=>{};\n        return;\n    }\n    c[a] = c[a] || function() {\n        (c[a].q = c[a].q || []).push(arguments);\n    };\n    t = l.createElement(r);\n    t.async = 1;\n    t.src = 'https://www.clarity.ms/tag/' + i;\n    y = l.getElementsByTagName(r)[0];\n    y.parentNode.insertBefore(t, y);\n    // Add error handling and logging for Clarity script loading\n    t.onerror = function() {\n        console.warn('Clarity tracking unavailable - likely blocked by ad blocker or privacy extension:', {\n            url: t.src,\n            error: 'ERR_BLOCKED_BY_CLIENT',\n            timestamp: new Date().toISOString(),\n            userAgent: navigator.userAgent,\n            referrer: document.referrer,\n            note: \"This is expected behavior with privacy tools and won't affect site functionality\"\n        });\n        // Set a global flag to indicate Clarity is blocked\n        window.clarityBlocked = true;\n    };\n    t.onload = function() {\n        console.warn('Clarity tracking initialized successfully:', {\n            url: t.src,\n            timestamp: new Date().toISOString()\n        });\n        // Set a global flag to indicate Clarity is available\n        window.clarityBlocked = false;\n    };\n})(window, document, 'clarity', 'script', 's7dys3l8mm');\n/**\n * Enhanced Clarity Event Tracking System\n * Comprehensive conversion funnel and user journey tracking\n */ class $3cea5ff051169056$var$ClarityEventTracker {\n    constructor(){\n        this.sessionId = this.generateSessionId();\n        this.userJourney = [];\n        this.conversionEvents = new Set();\n        this.isInitialized = false;\n        this.init();\n    }\n    /**\n   * Initialize Clarity event tracking\n   */ init() {\n        if (this.isInitialized) return;\n        // Wait for Clarity to load\n        this.waitForClarity().then(()=>{\n            this.setupAutoTracking();\n            this.trackSessionStart();\n            this.isInitialized = true;\n            console.warn('Enhanced Clarity tracking auto-initialized');\n        });\n    }\n    /**\n   * Wait for Clarity to be available\n   */ waitForClarity() {\n        return new Promise((resolve)=>{\n            if (typeof window.clarity === 'function') {\n                resolve();\n                return;\n            }\n            const checkClarity = setInterval(()=>{\n                if (typeof window.clarity === 'function') {\n                    clearInterval(checkClarity);\n                    resolve();\n                }\n            }, 100);\n            // Timeout after 10 seconds\n            setTimeout(()=>{\n                clearInterval(checkClarity);\n                console.warn('Clarity not available within timeout');\n                resolve();\n            }, 10000);\n        });\n    }\n    /**\n   * Generate unique session ID\n   */ generateSessionId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    /**\n   * Track session start\n   */ trackSessionStart() {\n        this.trackEvent('session_start', {\n            session_id: this.sessionId,\n            user_agent: navigator.userAgent,\n            referrer: document.referrer,\n            landing_page: window.location.href,\n            timestamp: new Date().toISOString()\n        });\n    }\n    /**\n   * Enhanced event tracking with conversion funnel context\n   */ trackEvent(eventName, properties = {}) {\n        // Check if Clarity is blocked or unavailable\n        if (typeof window.clarity !== 'function' || window.clarityBlocked === true) {\n            console.warn(`Clarity tracking skipped for ${eventName} (Clarity unavailable)`);\n            return;\n        }\n        // Add session context to all events\n        const enhancedProperties = {\n            ...properties,\n            session_id: this.sessionId,\n            page_url: window.location.href,\n            timestamp: new Date().toISOString()\n        };\n        // Track in Clarity\n        window.clarity('event', eventName, enhancedProperties);\n        // Track user journey for funnel analysis\n        this.userJourney.push({\n            event: eventName,\n            properties: enhancedProperties,\n            timestamp: Date.now()\n        });\n        console.warn(`Clarity Event: ${eventName}`, enhancedProperties);\n    }\n    /**\n   * Track conversion funnel milestones\n   */ trackConversionMilestone(milestone, details = {}) {\n        const eventName = `conversion_${milestone}`;\n        this.conversionEvents.add(milestone);\n        this.trackEvent(eventName, {\n            milestone: milestone,\n            funnel_step: this.getFunnelStep(milestone),\n            ...details\n        });\n    }\n    /**\n   * Get funnel step number for milestone\n   */ getFunnelStep(milestone) {\n        const funnelSteps = {\n            // Awareness\n            homepage_visit: 1,\n            hero_interaction: 1,\n            // Interest\n            project_view: 2,\n            case_study_start: 2,\n            content_engagement: 2,\n            // Consideration\n            case_study_complete: 3,\n            contact_page_visit: 3,\n            resume_download: 3,\n            // Action\n            contact_form_start: 4,\n            contact_form_submit: 4,\n            external_link_click: 4,\n            // Retention\n            return_visit: 5,\n            newsletter_signup: 5\n        };\n        return funnelSteps[milestone] || 0;\n    }\n    /**\n   * Track user intent signals\n   */ trackIntentSignal(signal, strength = 'medium') {\n        this.trackEvent('user_intent', {\n            signal: signal,\n            strength: strength,\n            intent_type: this.categorizeIntent(signal)\n        });\n    }\n    /**\n   * Categorize intent signals\n   */ categorizeIntent(signal) {\n        const intentCategories = {\n            // High intent signals\n            resume_download: 'job_inquiry',\n            contact_form_submit: 'direct_contact',\n            linkedin_click: 'professional_networking',\n            portfolio_view: 'career_interest',\n            // Medium intent signals\n            case_study_complete: 'project_interest',\n            long_session: 'content_engagement',\n            multiple_project_views: 'comprehensive_research',\n            // Low intent signals\n            homepage_visit: 'initial_awareness',\n            social_share: 'content_appreciation',\n            scroll_depth: 'content_engagement'\n        };\n        return intentCategories[signal] || 'general_engagement';\n    }\n    /**\n   * Track content engagement\n   */ trackContentEngagement(contentType, contentId, action, details = {}) {\n        this.trackEvent('content_engagement', {\n            content_type: contentType,\n            content_id: contentId,\n            action: action,\n            engagement_duration: details.duration || 0,\n            scroll_depth: details.scrollDepth || 0,\n            ...details\n        });\n    }\n    /**\n   * Track micro-conversions\n   */ trackMicroConversion(conversionType, value = 1) {\n        this.trackEvent('micro_conversion', {\n            conversion_type: conversionType,\n            value: value,\n            conversion_category: this.getConversionCategory(conversionType)\n        });\n    }\n    /**\n   * Get conversion category\n   */ getConversionCategory(conversionType) {\n        const categories = {\n            // Content engagement\n            case_study_view: 'content',\n            project_click: 'content',\n            scroll_depth_75: 'content',\n            // Lead generation\n            contact_page_visit: 'lead',\n            email_click: 'lead',\n            linkedin_click: 'lead',\n            // Business impact\n            resume_download: 'business',\n            contact_form_submit: 'business',\n            return_visit: 'business'\n        };\n        return categories[conversionType] || 'engagement';\n    }\n    /**\n   * Setup automatic tracking for common interactions\n   */ setupAutoTracking() {\n        this.trackScrollDepth();\n        this.trackTimeOnPage();\n        this.trackOutboundLinks();\n        this.trackProjectInteractions();\n        this.trackContactInteractions();\n        this.trackContentMilestones();\n    }\n    /**\n   * Track scroll depth milestones\n   */ trackScrollDepth() {\n        let maxScrollDepth = 0;\n        const milestones = [\n            25,\n            50,\n            75,\n            90,\n            100\n        ];\n        window.addEventListener('scroll', ()=>{\n            const scrollPercent = Math.round(window.scrollY / (document.documentElement.scrollHeight - window.innerHeight) * 100);\n            if (scrollPercent > maxScrollDepth) {\n                maxScrollDepth = scrollPercent;\n                milestones.forEach((milestone)=>{\n                    if (scrollPercent >= milestone && !this.conversionEvents.has(`scroll_${milestone}`)) {\n                        this.conversionEvents.add(`scroll_${milestone}`);\n                        this.trackMicroConversion(`scroll_depth_${milestone}`, milestone);\n                    }\n                });\n            }\n        });\n    }\n    /**\n   * Track time on page milestones\n   */ trackTimeOnPage() {\n        const milestones = [\n            30,\n            60,\n            120,\n            300\n        ]; // seconds\n        milestones.forEach((seconds)=>{\n            setTimeout(()=>{\n                if (!this.conversionEvents.has(`time_${seconds}s`)) {\n                    this.conversionEvents.add(`time_${seconds}s`);\n                    this.trackEvent('time_on_page', {\n                        duration_seconds: seconds,\n                        duration_minutes: Math.round(seconds / 60 * 10) / 10,\n                        milestone: `${seconds}s`\n                    });\n                }\n            }, seconds * 1000);\n        });\n    }\n    /**\n   * Track outbound link clicks\n   */ trackOutboundLinks() {\n        document.addEventListener('click', (e)=>{\n            const link = e.target.closest('a');\n            if (link && link.href) {\n                const url = new URL(link.href, window.location.origin);\n                // Check if it's an external link\n                if (url.origin !== window.location.origin) this.trackEvent('outbound_link_click', {\n                    destination_url: link.href,\n                    link_text: link.textContent?.trim() || '',\n                    link_type: this.getLinkType(link.href)\n                });\n            }\n        });\n    }\n    /**\n   * Get link type for categorization\n   */ getLinkType(url) {\n        if (url.includes('linkedin.com')) return 'professional';\n        if (url.includes('github.com')) return 'technical';\n        if (url.includes('mailto:')) return 'contact';\n        if (url.includes('twitter.com') || url.includes('x.com')) return 'social';\n        return 'external';\n    }\n    /**\n   * Track project card interactions\n   */ trackProjectInteractions() {\n        document.addEventListener('click', (e)=>{\n            const projectCard = e.target.closest('.card-link, .project-snippet');\n            if (projectCard) {\n                const link = projectCard.querySelector('a');\n                const projectName = projectCard.querySelector('h3, h2')?.textContent?.trim() || 'Unknown Project';\n                if (link) this.trackConversionMilestone('project_view', {\n                    project_name: projectName,\n                    project_url: link.href,\n                    project_type: this.getProjectType(link.href)\n                });\n            }\n        });\n    }\n    /**\n   * Get project type from URL\n   */ getProjectType(url) {\n        if (url.includes('autodesk')) return 'enterprise';\n        if (url.includes('intel')) return 'technology';\n        if (url.includes('daimler')) return 'automotive';\n        return 'portfolio';\n    }\n    /**\n   * Track contact page interactions\n   */ trackContactInteractions() {\n        // Track contact page visits\n        if (window.location.pathname.includes('contact')) this.trackConversionMilestone('contact_page_visit');\n        // Track contact link clicks\n        document.addEventListener('click', (e)=>{\n            const contactLink = e.target.closest(\"a[href*='mailto:'], a[href*='linkedin'], a[href*='github']\");\n            if (contactLink) {\n                const href = contactLink.getAttribute('href');\n                const linkType = this.getLinkType(href);\n                this.trackEvent('contact_interaction', {\n                    contact_type: linkType,\n                    contact_url: href,\n                    link_text: contactLink.textContent?.trim() || ''\n                });\n            }\n        });\n    }\n    /**\n   * Track content milestones for case studies\n   */ trackContentMilestones() {\n        // Track case study section views\n        const observer = new IntersectionObserver((entries)=>{\n            entries.forEach((entry)=>{\n                if (entry.isIntersecting) {\n                    const section = entry.target;\n                    const sectionId = section.id;\n                    const sectionName = section.querySelector('h2, h3')?.textContent?.trim() || sectionId;\n                    if (sectionId && !this.conversionEvents.has(`section_${sectionId}`)) {\n                        this.conversionEvents.add(`section_${sectionId}`);\n                        this.trackContentEngagement('case_study_section', sectionId, 'view', {\n                            section_name: sectionName\n                        });\n                    }\n                }\n            });\n        }, {\n            threshold: 0.5\n        });\n        // Observe all sections\n        document.querySelectorAll('section[id]').forEach((section)=>{\n            observer.observe(section);\n        });\n    }\n    /**\n   * Get user journey summary\n   */ getUserJourneySummary() {\n        return {\n            session_id: this.sessionId,\n            total_events: this.userJourney.length,\n            conversion_events: Array.from(this.conversionEvents),\n            journey_duration: this.userJourney.length > 0 ? this.userJourney[this.userJourney.length - 1].timestamp - this.userJourney[0].timestamp : 0,\n            funnel_progress: Math.max(...Array.from(this.conversionEvents).map((event)=>this.getFunnelStep(event.split('_').slice(1).join('_')) || 0)),\n            events: this.userJourney.slice(-20)\n        };\n    }\n    /**\n   * Export journey data for analysis\n   */ exportJourneyData() {\n        return {\n            summary: this.getUserJourneySummary(),\n            full_journey: this.userJourney,\n            conversion_funnel: this.analyzeConversionFunnel()\n        };\n    }\n    /**\n   * Analyze conversion funnel performance\n   */ analyzeConversionFunnel() {\n        const funnel = {\n            awareness: this.conversionEvents.has('homepage_visit') || this.conversionEvents.has('hero_interaction'),\n            interest: Array.from(this.conversionEvents).some((event)=>event.includes('project_view') || event.includes('case_study') || event.includes('content_engagement')),\n            consideration: Array.from(this.conversionEvents).some((event)=>event.includes('contact_page') || event.includes('resume_download') || event.includes('case_study_complete')),\n            action: Array.from(this.conversionEvents).some((event)=>event.includes('contact_form_submit') || event.includes('external_link_click')),\n            retention: this.conversionEvents.has('return_visit') || this.conversionEvents.has('newsletter_signup')\n        };\n        return {\n            funnel: funnel,\n            completion_rate: Object.values(funnel).filter(Boolean).length / Object.keys(funnel).length,\n            bottleneck: this.identifyBottleneck(funnel)\n        };\n    }\n    /**\n   * Identify funnel bottleneck\n   */ identifyBottleneck(funnel) {\n        const stages = Object.entries(funnel);\n        for(let i = 0; i < stages.length - 1; i++){\n            if (stages[i][1] && !stages[i + 1][1]) return stages[i + 1][0];\n        }\n        return null;\n    }\n}\n// Create and export singleton instance\nconst $3cea5ff051169056$var$clarityTracker = new $3cea5ff051169056$var$ClarityEventTracker();\n// Export for use in other scripts\nif (typeof window !== 'undefined') window.clarityTracking = {\n    trackEvent: (eventName, properties)=>$3cea5ff051169056$var$clarityTracker.trackEvent(eventName, properties),\n    trackConversionMilestone: (milestone, details)=>$3cea5ff051169056$var$clarityTracker.trackConversionMilestone(milestone, details),\n    trackIntentSignal: (signal, strength)=>$3cea5ff051169056$var$clarityTracker.trackIntentSignal(signal, strength),\n    trackContentEngagement: (type, id, action, details)=>$3cea5ff051169056$var$clarityTracker.trackContentEngagement(type, id, action, details),\n    trackMicroConversion: (type, value)=>$3cea5ff051169056$var$clarityTracker.trackMicroConversion(type, value),\n    getUserJourneySummary: ()=>$3cea5ff051169056$var$clarityTracker.getUserJourneySummary(),\n    exportJourneyData: ()=>$3cea5ff051169056$var$clarityTracker.exportJourneyData()\n};\nvar $3cea5ff051169056$export$2e2bcd8739ae039 = $3cea5ff051169056$var$clarityTracker;\n\n});\n\n\n//# sourceMappingURL=clarity-config.7481c6b1.js.map\n","/**\n * Microsoft Clarity Advanced Configuration\n * Enhanced tracking for conversion funnel analysis and user journey optimization\n */\n\n// Microsoft Clarity tracking code with enhanced configuration\n(function (c, l, a, r, i, t, y) {\n  // Only load in production\n  if (\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '127.0.0.1' ||\n    window.location.port !== ''\n  ) {\n    c[a] = () => {};\n    return;\n  }\n\n  c[a] =\n    c[a] ||\n    function () {\n      (c[a].q = c[a].q || []).push(arguments);\n    };\n  t = l.createElement(r);\n  t.async = 1;\n  t.src = 'https://www.clarity.ms/tag/' + i;\n  y = l.getElementsByTagName(r)[0];\n  y.parentNode.insertBefore(t, y);\n\n  // Add error handling and logging for Clarity script loading\n  t.onerror = function () {\n    console.warn(\n      'Clarity tracking unavailable - likely blocked by ad blocker or privacy extension:',\n      {\n        url: t.src,\n        error: 'ERR_BLOCKED_BY_CLIENT',\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent,\n        referrer: document.referrer,\n        note: \"This is expected behavior with privacy tools and won't affect site functionality\",\n      }\n    );\n\n    // Set a global flag to indicate Clarity is blocked\n    window.clarityBlocked = true;\n  };\n\n  t.onload = function () {\n    console.warn('Clarity tracking initialized successfully:', {\n      url: t.src,\n      timestamp: new Date().toISOString(),\n    });\n\n    // Set a global flag to indicate Clarity is available\n    window.clarityBlocked = false;\n  };\n})(window, document, 'clarity', 'script', 's7dys3l8mm');\n\n/**\n * Enhanced Clarity Event Tracking System\n * Comprehensive conversion funnel and user journey tracking\n */\nclass ClarityEventTracker {\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.userJourney = [];\n    this.conversionEvents = new Set();\n    this.isInitialized = false;\n\n    this.init();\n  }\n\n  /**\n   * Initialize Clarity event tracking\n   */\n  init() {\n    if (this.isInitialized) {\n      return;\n    }\n\n    // Wait for Clarity to load\n    this.waitForClarity().then(() => {\n      this.setupAutoTracking();\n      this.trackSessionStart();\n      this.isInitialized = true;\n      console.warn('Enhanced Clarity tracking auto-initialized');\n    });\n  }\n\n  /**\n   * Wait for Clarity to be available\n   */\n  waitForClarity() {\n    return new Promise(resolve => {\n      if (typeof window.clarity === 'function') {\n        resolve();\n        return;\n      }\n\n      const checkClarity = setInterval(() => {\n        if (typeof window.clarity === 'function') {\n          clearInterval(checkClarity);\n          resolve();\n        }\n      }, 100);\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        clearInterval(checkClarity);\n        console.warn('Clarity not available within timeout');\n        resolve();\n      }, 10000);\n    });\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  generateSessionId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  /**\n   * Track session start\n   */\n  trackSessionStart() {\n    this.trackEvent('session_start', {\n      session_id: this.sessionId,\n      user_agent: navigator.userAgent,\n      referrer: document.referrer,\n      landing_page: window.location.href,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Enhanced event tracking with conversion funnel context\n   */\n  trackEvent(eventName, properties = {}) {\n    // Check if Clarity is blocked or unavailable\n    if (\n      typeof window.clarity !== 'function' ||\n      window.clarityBlocked === true\n    ) {\n      console.warn(\n        `Clarity tracking skipped for ${eventName} (Clarity unavailable)`\n      );\n      return;\n    }\n\n    // Add session context to all events\n    const enhancedProperties = {\n      ...properties,\n      session_id: this.sessionId,\n      page_url: window.location.href,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Track in Clarity\n    window.clarity('event', eventName, enhancedProperties);\n\n    // Track user journey for funnel analysis\n    this.userJourney.push({\n      event: eventName,\n      properties: enhancedProperties,\n      timestamp: Date.now(),\n    });\n\n    console.warn(`Clarity Event: ${eventName}`, enhancedProperties);\n  }\n\n  /**\n   * Track conversion funnel milestones\n   */\n  trackConversionMilestone(milestone, details = {}) {\n    const eventName = `conversion_${milestone}`;\n    this.conversionEvents.add(milestone);\n\n    this.trackEvent(eventName, {\n      milestone,\n      funnel_step: this.getFunnelStep(milestone),\n      ...details,\n    });\n  }\n\n  /**\n   * Get funnel step number for milestone\n   */\n  getFunnelStep(milestone) {\n    const funnelSteps = {\n      // Awareness\n      homepage_visit: 1,\n      hero_interaction: 1,\n\n      // Interest\n      project_view: 2,\n      case_study_start: 2,\n      content_engagement: 2,\n\n      // Consideration\n      case_study_complete: 3,\n      contact_page_visit: 3,\n      resume_download: 3,\n\n      // Action\n      contact_form_start: 4,\n      contact_form_submit: 4,\n      external_link_click: 4,\n\n      // Retention\n      return_visit: 5,\n      newsletter_signup: 5,\n    };\n\n    return funnelSteps[milestone] || 0;\n  }\n\n  /**\n   * Track user intent signals\n   */\n  trackIntentSignal(signal, strength = 'medium') {\n    this.trackEvent('user_intent', {\n      signal,\n      strength, // low, medium, high\n      intent_type: this.categorizeIntent(signal),\n    });\n  }\n\n  /**\n   * Categorize intent signals\n   */\n  categorizeIntent(signal) {\n    const intentCategories = {\n      // High intent signals\n      resume_download: 'job_inquiry',\n      contact_form_submit: 'direct_contact',\n      linkedin_click: 'professional_networking',\n      portfolio_view: 'career_interest',\n\n      // Medium intent signals\n      case_study_complete: 'project_interest',\n      long_session: 'content_engagement',\n      multiple_project_views: 'comprehensive_research',\n\n      // Low intent signals\n      homepage_visit: 'initial_awareness',\n      social_share: 'content_appreciation',\n      scroll_depth: 'content_engagement',\n    };\n\n    return intentCategories[signal] || 'general_engagement';\n  }\n\n  /**\n   * Track content engagement\n   */\n  trackContentEngagement(contentType, contentId, action, details = {}) {\n    this.trackEvent('content_engagement', {\n      content_type: contentType,\n      content_id: contentId,\n      action, // view, read, share, save, etc.\n      engagement_duration: details.duration || 0,\n      scroll_depth: details.scrollDepth || 0,\n      ...details,\n    });\n  }\n\n  /**\n   * Track micro-conversions\n   */\n  trackMicroConversion(conversionType, value = 1) {\n    this.trackEvent('micro_conversion', {\n      conversion_type: conversionType,\n      value,\n      conversion_category: this.getConversionCategory(conversionType),\n    });\n  }\n\n  /**\n   * Get conversion category\n   */\n  getConversionCategory(conversionType) {\n    const categories = {\n      // Content engagement\n      case_study_view: 'content',\n      project_click: 'content',\n      scroll_depth_75: 'content',\n\n      // Lead generation\n      contact_page_visit: 'lead',\n      email_click: 'lead',\n      linkedin_click: 'lead',\n\n      // Business impact\n      resume_download: 'business',\n      contact_form_submit: 'business',\n      return_visit: 'business',\n    };\n\n    return categories[conversionType] || 'engagement';\n  }\n\n  /**\n   * Setup automatic tracking for common interactions\n   */\n  setupAutoTracking() {\n    this.trackScrollDepth();\n    this.trackTimeOnPage();\n    this.trackOutboundLinks();\n    this.trackProjectInteractions();\n    this.trackContactInteractions();\n    this.trackContentMilestones();\n  }\n\n  /**\n   * Track scroll depth milestones\n   */\n  trackScrollDepth() {\n    let maxScrollDepth = 0;\n    const milestones = [25, 50, 75, 90, 100];\n\n    window.addEventListener('scroll', () => {\n      const scrollPercent = Math.round(\n        (window.scrollY /\n          (document.documentElement.scrollHeight - window.innerHeight)) *\n          100\n      );\n\n      if (scrollPercent > maxScrollDepth) {\n        maxScrollDepth = scrollPercent;\n\n        milestones.forEach(milestone => {\n          if (\n            scrollPercent >= milestone &&\n            !this.conversionEvents.has(`scroll_${milestone}`)\n          ) {\n            this.conversionEvents.add(`scroll_${milestone}`);\n            this.trackMicroConversion(`scroll_depth_${milestone}`, milestone);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Track time on page milestones\n   */\n  trackTimeOnPage() {\n    const milestones = [30, 60, 120, 300]; // seconds\n\n    milestones.forEach(seconds => {\n      setTimeout(() => {\n        if (!this.conversionEvents.has(`time_${seconds}s`)) {\n          this.conversionEvents.add(`time_${seconds}s`);\n          this.trackEvent('time_on_page', {\n            duration_seconds: seconds,\n            duration_minutes: Math.round((seconds / 60) * 10) / 10,\n            milestone: `${seconds}s`,\n          });\n        }\n      }, seconds * 1000);\n    });\n  }\n\n  /**\n   * Track outbound link clicks\n   */\n  trackOutboundLinks() {\n    document.addEventListener('click', e => {\n      const link = e.target.closest('a');\n      if (link && link.href) {\n        const url = new URL(link.href, window.location.origin);\n\n        // Check if it's an external link\n        if (url.origin !== window.location.origin) {\n          this.trackEvent('outbound_link_click', {\n            destination_url: link.href,\n            link_text: link.textContent?.trim() || '',\n            link_type: this.getLinkType(link.href),\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Get link type for categorization\n   */\n  getLinkType(url) {\n    if (url.includes('linkedin.com')) {\n      return 'professional';\n    }\n    if (url.includes('github.com')) {\n      return 'technical';\n    }\n    if (url.includes('mailto:')) {\n      return 'contact';\n    }\n    if (url.includes('twitter.com') || url.includes('x.com')) {\n      return 'social';\n    }\n    return 'external';\n  }\n\n  /**\n   * Track project card interactions\n   */\n  trackProjectInteractions() {\n    document.addEventListener('click', e => {\n      const projectCard = e.target.closest('.card-link, .project-snippet');\n      if (projectCard) {\n        const link = projectCard.querySelector('a');\n        const projectName =\n          projectCard.querySelector('h3, h2')?.textContent?.trim() ||\n          'Unknown Project';\n\n        if (link) {\n          this.trackConversionMilestone('project_view', {\n            project_name: projectName,\n            project_url: link.href,\n            project_type: this.getProjectType(link.href),\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Get project type from URL\n   */\n  getProjectType(url) {\n    if (url.includes('autodesk')) {\n      return 'enterprise';\n    }\n    if (url.includes('intel')) {\n      return 'technology';\n    }\n    if (url.includes('daimler')) {\n      return 'automotive';\n    }\n    return 'portfolio';\n  }\n\n  /**\n   * Track contact page interactions\n   */\n  trackContactInteractions() {\n    // Track contact page visits\n    if (window.location.pathname.includes('contact')) {\n      this.trackConversionMilestone('contact_page_visit');\n    }\n\n    // Track contact link clicks\n    document.addEventListener('click', e => {\n      const contactLink = e.target.closest(\n        \"a[href*='mailto:'], a[href*='linkedin'], a[href*='github']\"\n      );\n      if (contactLink) {\n        const href = contactLink.getAttribute('href');\n        const linkType = this.getLinkType(href);\n\n        this.trackEvent('contact_interaction', {\n          contact_type: linkType,\n          contact_url: href,\n          link_text: contactLink.textContent?.trim() || '',\n        });\n      }\n    });\n  }\n\n  /**\n   * Track content milestones for case studies\n   */\n  trackContentMilestones() {\n    // Track case study section views\n    const observer = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const section = entry.target;\n            const sectionId = section.id;\n            const sectionName =\n              section.querySelector('h2, h3')?.textContent?.trim() || sectionId;\n\n            if (\n              sectionId &&\n              !this.conversionEvents.has(`section_${sectionId}`)\n            ) {\n              this.conversionEvents.add(`section_${sectionId}`);\n              this.trackContentEngagement(\n                'case_study_section',\n                sectionId,\n                'view',\n                {\n                  section_name: sectionName,\n                }\n              );\n            }\n          }\n        });\n      },\n      { threshold: 0.5 }\n    );\n\n    // Observe all sections\n    document.querySelectorAll('section[id]').forEach(section => {\n      observer.observe(section);\n    });\n  }\n\n  /**\n   * Get user journey summary\n   */\n  getUserJourneySummary() {\n    return {\n      session_id: this.sessionId,\n      total_events: this.userJourney.length,\n      conversion_events: Array.from(this.conversionEvents),\n      journey_duration:\n        this.userJourney.length > 0\n          ? this.userJourney[this.userJourney.length - 1].timestamp -\n            this.userJourney[0].timestamp\n          : 0,\n      funnel_progress: Math.max(\n        ...Array.from(this.conversionEvents).map(\n          event => this.getFunnelStep(event.split('_').slice(1).join('_')) || 0\n        )\n      ),\n      events: this.userJourney.slice(-20), // Last 20 events\n    };\n  }\n\n  /**\n   * Export journey data for analysis\n   */\n  exportJourneyData() {\n    return {\n      summary: this.getUserJourneySummary(),\n      full_journey: this.userJourney,\n      conversion_funnel: this.analyzeConversionFunnel(),\n    };\n  }\n\n  /**\n   * Analyze conversion funnel performance\n   */\n  analyzeConversionFunnel() {\n    const funnel = {\n      awareness:\n        this.conversionEvents.has('homepage_visit') ||\n        this.conversionEvents.has('hero_interaction'),\n      interest: Array.from(this.conversionEvents).some(\n        event =>\n          event.includes('project_view') ||\n          event.includes('case_study') ||\n          event.includes('content_engagement')\n      ),\n      consideration: Array.from(this.conversionEvents).some(\n        event =>\n          event.includes('contact_page') ||\n          event.includes('resume_download') ||\n          event.includes('case_study_complete')\n      ),\n      action: Array.from(this.conversionEvents).some(\n        event =>\n          event.includes('contact_form_submit') ||\n          event.includes('external_link_click')\n      ),\n      retention:\n        this.conversionEvents.has('return_visit') ||\n        this.conversionEvents.has('newsletter_signup'),\n    };\n\n    return {\n      funnel,\n      completion_rate:\n        Object.values(funnel).filter(Boolean).length /\n        Object.keys(funnel).length,\n      bottleneck: this.identifyBottleneck(funnel),\n    };\n  }\n\n  /**\n   * Identify funnel bottleneck\n   */\n  identifyBottleneck(funnel) {\n    const stages = Object.entries(funnel);\n    for (let i = 0; i < stages.length - 1; i++) {\n      if (stages[i][1] && !stages[i + 1][1]) {\n        return stages[i + 1][0];\n      }\n    }\n    return null;\n  }\n}\n\n// Create and export singleton instance\nconst clarityTracker = new ClarityEventTracker();\n\n// Export for use in other scripts\nif (typeof window !== 'undefined') {\n  window.clarityTracking = {\n    trackEvent: (eventName, properties) =>\n      clarityTracker.trackEvent(eventName, properties),\n    trackConversionMilestone: (milestone, details) =>\n      clarityTracker.trackConversionMilestone(milestone, details),\n    trackIntentSignal: (signal, strength) =>\n      clarityTracker.trackIntentSignal(signal, strength),\n    trackContentEngagement: (type, id, action, details) =>\n      clarityTracker.trackContentEngagement(type, id, action, details),\n    trackMicroConversion: (type, value) =>\n      clarityTracker.trackMicroConversion(type, value),\n    getUserJourneySummary: () => clarityTracker.getUserJourneySummary(),\n    exportJourneyData: () => clarityTracker.exportJourneyData(),\n  };\n}\n\nexport default clarityTracker;\n"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","register","module","exports","Object","defineProperty","value","configurable","get","$3cea5ff051169056$export$2e2bcd8739ae039","set","s","enumerable","c","l","a","r","i","t","y","location","hostname","port","q","push","arguments","createElement","async","src","getElementsByTagName","parentNode","insertBefore","onerror","console","warn","url","error","timestamp","Date","toISOString","userAgent","navigator","referrer","document","note","clarityBlocked","onload","$3cea5ff051169056$var$clarityTracker","sessionId","generateSessionId","userJourney","conversionEvents","Set","isInitialized","init","waitForClarity","then","setupAutoTracking","trackSessionStart","Promise","resolve","clarity","checkClarity","setInterval","clearInterval","setTimeout","now","toString","Math","random","substr","trackEvent","session_id","user_agent","landing_page","href","eventName","properties","enhancedProperties","page_url","event","trackConversionMilestone","milestone","details","add","funnel_step","getFunnelStep","funnelSteps","homepage_visit","hero_interaction","project_view","case_study_start","content_engagement","case_study_complete","contact_page_visit","resume_download","contact_form_start","contact_form_submit","external_link_click","return_visit","newsletter_signup","trackIntentSignal","signal","strength","intent_type","categorizeIntent","intentCategories","linkedin_click","portfolio_view","long_session","multiple_project_views","social_share","scroll_depth","trackContentEngagement","contentType","contentId","action","content_type","content_id","engagement_duration","duration","scrollDepth","trackMicroConversion","conversionType","conversion_type","conversion_category","getConversionCategory","categories","case_study_view","project_click","scroll_depth_75","email_click","trackScrollDepth","trackTimeOnPage","trackOutboundLinks","trackProjectInteractions","trackContactInteractions","trackContentMilestones","maxScrollDepth","milestones","addEventListener","scrollPercent","round","scrollY","documentElement","scrollHeight","innerHeight","forEach","has","seconds","duration_seconds","duration_minutes","e","link","target","closest","URL","origin","destination_url","link_text","textContent","trim","link_type","getLinkType","includes","projectCard","querySelector","projectName","project_name","project_url","project_type","getProjectType","pathname","contactLink","getAttribute","linkType","contact_type","contact_url","observer","IntersectionObserver","entries","entry","isIntersecting","section","sectionId","id","sectionName","section_name","threshold","querySelectorAll","observe","getUserJourneySummary","total_events","length","conversion_events","Array","from","journey_duration","funnel_progress","max","map","split","slice","join","events","exportJourneyData","summary","full_journey","conversion_funnel","analyzeConversionFunnel","funnel","awareness","interest","some","consideration","retention","completion_rate","values","filter","Boolean","keys","bottleneck","identifyBottleneck","stages","clarityTracking","type"],"version":3,"file":"clarity-config.7481c6b1.js.map"}