{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,a,C,M,C,E,a,C,C,G,E,E,O,C,kB,W,O,C,G,E,E,O,C,U,W,O,C,ECKA,OAAM,EACJ,YAAY,EAAU,CAAC,CAAC,CAAE,CACxB,IAAI,CAAC,aAAa,CAAG,EAAQ,aAAa,EAAI,eAC9C,IAAI,CAAC,aAAa,CAAG,CAAA,EACrB,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,aAAa,GACtC,IAAI,CAAC,aAAa,CAAG,IAAI,CAAC,cAAc,GACxC,IAAI,CAAC,KAAK,CAAG,EAAE,CACf,IAAI,CAAC,YAAY,CAAG,CAAA,CACtB,CAKA,MAAM,MAAO,CACX,GAAI,IAAI,CAAC,aAAa,CACpB,MAAO,CAAA,EAGT,GAAI,CAgBF,OAdA,MAAM,IAAI,CAAC,YAAY,GAEnB,AAAC,IAAI,CAAC,YAAY,EACpB,IAAI,CAAC,aAAa,GAGpB,IAAI,CAAC,aAAa,CAAG,CAAA,EAGrB,IAAI,CAAC,aAAa,GAGlB,IAAI,CAAC,mBAAmB,GAEjB,CAAA,CACT,CAAE,MAAO,EAAO,CAId,OAHA,IAAI,CAAC,YAAY,CAAC,iBAAkB,GACpC,IAAI,CAAC,YAAY,CAAG,CAAA,EACpB,IAAI,CAAC,aAAa,CAAG,CAAA,EACd,CAAA,CACT,CACF,CAKA,cAAe,CACb,OAAO,IAAI,QAAQ,AAAA,IAEjB,GAAI,AAAkB,aAAlB,OAAO,OAAwB,CACjC,IAAI,CAAC,YAAY,CAAG,CAAA,EACpB,IACA,MACF,CAEA,GAAI,IAAI,CAAC,YAAY,EAMjB,OAAO,IAAI,CANQ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","sources":["<anon>","src/js/analytics/simple-analytics.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire9b4d\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire9b4d\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"grZMe\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"SimpleAnalytics\", function () { return $bf9f16924f1c18dc$export$2d9921d8d94967bf; });\n$parcel$export(module.exports, \"default\", function () { return $bf9f16924f1c18dc$export$2e2bcd8739ae039; });\n/**\n * Minimal Analytics - Ultra-lightweight analytics solution\n * Target size: <3KB, essential tracking only\n */ class $bf9f16924f1c18dc$export$2d9921d8d94967bf {\n    constructor(options = {}){\n        this.measurementId = options.measurementId || 'G-Z5DNDF44NG';\n        this.isInitialized = false;\n        this.consentGiven = this._checkConsent();\n        this.isDevelopment = this._isDevelopment();\n        this.queue = [];\n        this.fallbackMode = false;\n    }\n    /**\n   * Initialize analytics\n   */ async init() {\n        if (this.isInitialized) return true;\n        try {\n            // Wait for gtag to be available or create fallback\n            await this._waitForGtag();\n            if (!this.fallbackMode) this._configureGA4();\n            this.isInitialized = true;\n            // Process queued events\n            this._processQueue();\n            // Enable auto-tracking\n            this._enableAutoTracking();\n            return true;\n        } catch (error) {\n            this._handleError('initialization', error);\n            this.fallbackMode = true;\n            this.isInitialized = true; // Allow fallback mode\n            return false;\n        }\n    }\n    /**\n   * Wait for Google Analytics gtag to load\n   */ _waitForGtag() {\n        return new Promise((resolve)=>{\n            // Check if we're in a browser environment\n            if (typeof window === 'undefined') {\n                this.fallbackMode = true;\n                resolve();\n                return;\n            }\n            if (this.fallbackMode) {\n                resolve();\n                return;\n            }\n            // Check if gtag already exists\n            if (window.gtag) {\n                resolve();\n                return;\n            }\n            // Wait for script to load\n            let attempts = 0;\n            const maxAttempts = 20;\n            const checkGtag = setInterval(()=>{\n                attempts++;\n                if (window.gtag) {\n                    clearInterval(checkGtag);\n                    resolve();\n                } else if (attempts >= maxAttempts) {\n                    clearInterval(checkGtag);\n                    this.fallbackMode = true;\n                    resolve(); // Resolve in fallback mode\n                }\n            }, 100);\n        });\n    }\n    /**\n   * Configure Google Analytics 4\n   */ _configureGA4() {\n        if (this.fallbackMode || typeof document === 'undefined') return;\n        // Initialize dataLayer if needed\n        window.dataLayer = window.dataLayer || [];\n        // Configure GA4\n        window.gtag('js', new Date());\n        window.gtag('config', this.measurementId, {\n            page_title: document.title,\n            page_location: window.location.href,\n            allow_ad_personalization_signals: false,\n            allow_google_signals: false,\n            send_page_view: true\n        });\n    }\n    /**\n   * Check if user has given consent\n   */ _checkConsent() {\n        try {\n            const consent = localStorage.getItem('analytics-consent');\n            return consent === 'granted';\n        } catch  {\n            return false; // Default to no consent if localStorage fails\n        }\n    }\n    /**\n   * Set user consent\n   */ setConsent(granted) {\n        try {\n            localStorage.setItem('analytics-consent', granted ? 'granted' : 'denied');\n            this.consentGiven = granted;\n            if (granted && this.isInitialized) this._processQueue();\n        } catch  {\n        // Silently fail if localStorage is not available\n        }\n    }\n    /**\n   * Check if in development environment\n   */ _isDevelopment() {\n        if (typeof window === 'undefined') return true; // Assume development if no window (Node.js environment)\n        return window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.port !== '';\n    }\n    /**\n   * Enable automatic tracking\n   */ _enableAutoTracking() {\n        if (typeof document === 'undefined') return;\n        // Track page visibility changes\n        document.addEventListener('visibilitychange', ()=>{\n            if (document.hidden) this.trackTimeOnPage();\n        });\n        // Track scroll depth\n        let maxScrollDepth = 0;\n        window.addEventListener('scroll', ()=>{\n            const scrollDepth = Math.round(window.scrollY / (document.documentElement.scrollHeight - window.innerHeight) * 100);\n            if (scrollDepth > maxScrollDepth) {\n                maxScrollDepth = scrollDepth;\n                if (scrollDepth % 25 === 0) // Track at 25%, 50%, 75%, 100%\n                this.trackScrollDepth(scrollDepth);\n            }\n        });\n        // Initialize Core Web Vitals monitoring\n        this._initCoreWebVitals();\n    }\n    /**\n   * Initialize Core Web Vitals monitoring (simplified)\n   */ _initCoreWebVitals() {\n        if (typeof window === 'undefined' || this.isDevelopment) return;\n        // Simplified LCP tracking\n        if ('PerformanceObserver' in window) try {\n            const observer = new PerformanceObserver((list)=>{\n                const entries = list.getEntries();\n                if (entries.length > 0) {\n                    const lastEntry = entries[entries.length - 1];\n                    this.trackCoreWebVital('LCP', lastEntry.startTime);\n                }\n            });\n            observer.observe({\n                entryTypes: [\n                    'largest-contentful-paint'\n                ]\n            });\n            setTimeout(()=>observer.disconnect(), 5000);\n        } catch (error) {\n            this._handleError('Core Web Vitals', error);\n        }\n    }\n    /**\n   * Send event to Google Analytics 4\n   */ _sendToGA4(eventName, parameters = {}) {\n        if (!this.consentGiven || this.fallbackMode) {\n            // Queue for later if no consent, or log in fallback mode\n            if (!this.consentGiven) this.queue.push({\n                eventName: eventName,\n                parameters: parameters\n            });\n            else if (this.fallbackMode) console.warn('Analytics (fallback):', eventName, parameters);\n            return;\n        }\n        try {\n            window.gtag('event', eventName, parameters);\n        } catch (error) {\n            this._handleError('sendToGA4', error);\n        }\n    }\n    /**\n   * Process queued events\n   */ _processQueue() {\n        if (!this.consentGiven) return;\n        this.queue.forEach(({ eventName: eventName, parameters: parameters })=>{\n            this._sendToGA4(eventName, parameters);\n        });\n        this.queue = [];\n    }\n    /**\n   * Handle errors gracefully\n   */ _handleError(context, error) {\n        console.warn(`Analytics error in ${context}:`, error);\n    // Could send to error reporting service here if needed\n    }\n    // ===== PUBLIC API METHODS =====\n    /**\n   * Track project clicks/views\n   */ trackProjectClick(projectName, projectType = 'unknown') {\n        this._sendToGA4('project_interaction', {\n            project_name: projectName,\n            project_type: projectType,\n            interaction_type: 'click'\n        });\n    }\n    /**\n   * Track resume downloads\n   */ trackResumeDownload() {\n        this._sendToGA4('file_download', {\n            file_name: 'resume',\n            file_type: 'pdf'\n        });\n    }\n    /**\n   * Track contact form interactions\n   */ trackContactForm(action, method = 'unknown') {\n        this._sendToGA4('contact_form', {\n            action: action,\n            method: method\n        });\n    }\n    /**\n   * Track external link clicks\n   */ trackExternalLink(url, linkText = '') {\n        this._sendToGA4('external_link', {\n            link_url: url,\n            link_text: linkText\n        });\n    }\n    /**\n   * Track scroll depth (simplified)\n   */ trackScrollDepth(depth = null) {\n        const scrollDepth = depth || Math.round(window.scrollY / (document.documentElement.scrollHeight - window.innerHeight) * 100);\n        this._sendToGA4('scroll_depth', {\n            scroll_depth: scrollDepth\n        });\n    }\n    /**\n   * Track time on page (simplified)\n   */ trackTimeOnPage() {\n        if (!this.pageStartTime) {\n            this.pageStartTime = Date.now();\n            return;\n        }\n        const timeSpent = Math.round((Date.now() - this.pageStartTime) / 1000);\n        this._sendToGA4('time_on_page', {\n            time_spent_seconds: timeSpent\n        });\n    }\n    /**\n   * Track Core Web Vitals\n   */ trackCoreWebVital(metric, value) {\n        this._sendToGA4('core_web_vitals', {\n            metric: metric,\n            value: Math.round(value * 100) / 100,\n            page_path: window.location.pathname\n        });\n    }\n    /**\n   * Track case study interactions (view, completion, etc.)\n   */ trackCaseStudyInteraction(caseStudyName, interactionType = 'view', section = 'body') {\n        this._sendToGA4('case_study_interaction', {\n            case_study_name: caseStudyName,\n            action: interactionType,\n            section: section\n        });\n    }\n    /**\n   * Track case study completion\n   */ trackCaseStudyCompletion(caseStudyName) {\n        this.trackCaseStudyInteraction(caseStudyName, 'complete');\n    }\n    getStatus() {\n        return {\n            initialized: this.isInitialized,\n            consentGiven: this.consentGiven,\n            fallbackMode: this.fallbackMode,\n            isDevelopment: this.isDevelopment,\n            queueLength: this.queue.length\n        };\n    }\n}\n// Create singleton instance\nconst $bf9f16924f1c18dc$var$analytics = new $bf9f16924f1c18dc$export$2d9921d8d94967bf();\n// Auto-initialize only in browser environment\nif (typeof window !== 'undefined') {\n    // Set up global API immediately (synchronously)\n    const globalAPI = {\n        trackProjectClick: (...args)=>$bf9f16924f1c18dc$var$analytics.trackProjectClick(...args),\n        trackResumeDownload: ()=>$bf9f16924f1c18dc$var$analytics.trackResumeDownload(),\n        trackContactForm: (...args)=>$bf9f16924f1c18dc$var$analytics.trackContactForm(...args),\n        trackExternalLink: (...args)=>$bf9f16924f1c18dc$var$analytics.trackExternalLink(...args),\n        trackScrollDepth: ()=>$bf9f16924f1c18dc$var$analytics.trackScrollDepth(),\n        trackTimeOnPage: ()=>$bf9f16924f1c18dc$var$analytics.trackTimeOnPage(),\n        trackImageLightbox: (...args)=>$bf9f16924f1c18dc$var$analytics.trackImageLightbox(...args),\n        trackCaseStudyCompletion: (...args)=>$bf9f16924f1c18dc$var$analytics.trackCaseStudyCompletion(...args),\n        setConsent: (granted)=>$bf9f16924f1c18dc$var$analytics.setConsent(granted),\n        getStatus: ()=>$bf9f16924f1c18dc$var$analytics.getStatus()\n    };\n    // Expose global API\n    window.portfolioAnalytics = globalAPI;\n    // Initialize analytics asynchronously\n    $bf9f16924f1c18dc$var$analytics.init().then((success)=>{\n        if (success) console.warn('Portfolio Analytics initialized successfully');\n        else console.warn('Portfolio Analytics initialized in fallback mode');\n    }).catch((error)=>{\n        console.warn('Portfolio Analytics initialization failed:', error);\n    });\n}\nvar // Export for ES modules\n$bf9f16924f1c18dc$export$2e2bcd8739ae039 = $bf9f16924f1c18dc$var$analytics;\n\n});\n\n\nparcelRequire(\"grZMe\");\n\n//# sourceMappingURL=simple-analytics.5afbc888.js.map\n","/**\n * Minimal Analytics - Ultra-lightweight analytics solution\n * Target size: <3KB, essential tracking only\n */\n\nclass SimpleAnalytics {\n  constructor(options = {}) {\n    this.measurementId = options.measurementId || 'G-Z5DNDF44NG';\n    this.isInitialized = false;\n    this.consentGiven = this._checkConsent();\n    this.isDevelopment = this._isDevelopment();\n    this.queue = [];\n    this.fallbackMode = false;\n  }\n\n  /**\n   * Initialize analytics\n   */\n  async init() {\n    if (this.isInitialized) {\n      return true;\n    }\n\n    try {\n      // Wait for gtag to be available or create fallback\n      await this._waitForGtag();\n\n      if (!this.fallbackMode) {\n        this._configureGA4();\n      }\n\n      this.isInitialized = true;\n\n      // Process queued events\n      this._processQueue();\n\n      // Enable auto-tracking\n      this._enableAutoTracking();\n\n      return true;\n    } catch (error) {\n      this._handleError('initialization', error);\n      this.fallbackMode = true;\n      this.isInitialized = true; // Allow fallback mode\n      return false;\n    }\n  }\n\n  /**\n   * Wait for Google Analytics gtag to load\n   */\n  _waitForGtag() {\n    return new Promise(resolve => {\n      // Check if we're in a browser environment\n      if (typeof window === 'undefined') {\n        this.fallbackMode = true;\n        resolve();\n        return;\n      }\n\n      if (this.fallbackMode) {\n        resolve();\n        return;\n      }\n\n      // Check if gtag already exists\n      if (window.gtag) {\n        resolve();\n        return;\n      }\n\n      // Wait for script to load\n      let attempts = 0;\n      const maxAttempts = 20;\n\n      const checkGtag = setInterval(() => {\n        attempts++;\n\n        if (window.gtag) {\n          clearInterval(checkGtag);\n          resolve();\n        } else if (attempts >= maxAttempts) {\n          clearInterval(checkGtag);\n          this.fallbackMode = true;\n          resolve(); // Resolve in fallback mode\n        }\n      }, 100);\n    });\n  }\n\n  /**\n   * Configure Google Analytics 4\n   */\n  _configureGA4() {\n    if (this.fallbackMode || typeof document === 'undefined') {\n      return;\n    }\n\n    // Initialize dataLayer if needed\n    window.dataLayer = window.dataLayer || [];\n\n    // Configure GA4\n    window.gtag('js', new Date());\n    window.gtag('config', this.measurementId, {\n      page_title: document.title,\n      page_location: window.location.href,\n      allow_ad_personalization_signals: false,\n      allow_google_signals: false, // Privacy-first\n      send_page_view: true,\n    });\n  }\n\n  /**\n   * Check if user has given consent\n   */\n  _checkConsent() {\n    try {\n      const consent = localStorage.getItem('analytics-consent');\n      return consent === 'granted';\n    } catch {\n      return false; // Default to no consent if localStorage fails\n    }\n  }\n\n  /**\n   * Set user consent\n   */\n  setConsent(granted) {\n    try {\n      localStorage.setItem('analytics-consent', granted ? 'granted' : 'denied');\n      this.consentGiven = granted;\n\n      if (granted && this.isInitialized) {\n        this._processQueue();\n      }\n    } catch {\n      // Silently fail if localStorage is not available\n    }\n  }\n\n  /**\n   * Check if in development environment\n   */\n  _isDevelopment() {\n    if (typeof window === 'undefined') {\n      return true; // Assume development if no window (Node.js environment)\n    }\n    return (\n      window.location.hostname === 'localhost' ||\n      window.location.hostname === '127.0.0.1' ||\n      window.location.port !== ''\n    );\n  }\n\n  /**\n   * Enable automatic tracking\n   */\n  _enableAutoTracking() {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    // Track page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.trackTimeOnPage();\n      }\n    });\n\n    // Track scroll depth\n    let maxScrollDepth = 0;\n    window.addEventListener('scroll', () => {\n      const scrollDepth = Math.round(\n        (window.scrollY /\n          (document.documentElement.scrollHeight - window.innerHeight)) *\n          100\n      );\n      if (scrollDepth > maxScrollDepth) {\n        maxScrollDepth = scrollDepth;\n        if (scrollDepth % 25 === 0) {\n          // Track at 25%, 50%, 75%, 100%\n          this.trackScrollDepth(scrollDepth);\n        }\n      }\n    });\n\n    // Initialize Core Web Vitals monitoring\n    this._initCoreWebVitals();\n  }\n\n  /**\n   * Initialize Core Web Vitals monitoring (simplified)\n   */\n  _initCoreWebVitals() {\n    if (typeof window === 'undefined' || this.isDevelopment) {\n      return;\n    }\n\n    // Simplified LCP tracking\n    if ('PerformanceObserver' in window) {\n      try {\n        const observer = new PerformanceObserver(list => {\n          const entries = list.getEntries();\n          if (entries.length > 0) {\n            const lastEntry = entries[entries.length - 1];\n            this.trackCoreWebVital('LCP', lastEntry.startTime);\n          }\n        });\n        observer.observe({ entryTypes: ['largest-contentful-paint'] });\n        setTimeout(() => observer.disconnect(), 5000);\n      } catch (error) {\n        this._handleError('Core Web Vitals', error);\n      }\n    }\n  }\n\n  /**\n   * Send event to Google Analytics 4\n   */\n  _sendToGA4(eventName, parameters = {}) {\n    if (!this.consentGiven || this.fallbackMode) {\n      // Queue for later if no consent, or log in fallback mode\n      if (!this.consentGiven) {\n        this.queue.push({ eventName, parameters });\n      } else if (this.fallbackMode) {\n        console.warn('Analytics (fallback):', eventName, parameters);\n      }\n      return;\n    }\n\n    try {\n      window.gtag('event', eventName, parameters);\n    } catch (error) {\n      this._handleError('sendToGA4', error);\n    }\n  }\n\n  /**\n   * Process queued events\n   */\n  _processQueue() {\n    if (!this.consentGiven) {\n      return;\n    }\n\n    this.queue.forEach(({ eventName, parameters }) => {\n      this._sendToGA4(eventName, parameters);\n    });\n    this.queue = [];\n  }\n\n  /**\n   * Handle errors gracefully\n   */\n  _handleError(context, error) {\n    console.warn(`Analytics error in ${context}:`, error);\n    // Could send to error reporting service here if needed\n  }\n\n  // ===== PUBLIC API METHODS =====\n\n  /**\n   * Track project clicks/views\n   */\n  trackProjectClick(projectName, projectType = 'unknown') {\n    this._sendToGA4('project_interaction', {\n      project_name: projectName,\n      project_type: projectType,\n      interaction_type: 'click',\n    });\n  }\n\n  /**\n   * Track resume downloads\n   */\n  trackResumeDownload() {\n    this._sendToGA4('file_download', {\n      file_name: 'resume',\n      file_type: 'pdf',\n    });\n  }\n\n  /**\n   * Track contact form interactions\n   */\n  trackContactForm(action, method = 'unknown') {\n    this._sendToGA4('contact_form', {\n      action: action,\n      method: method,\n    });\n  }\n\n  /**\n   * Track external link clicks\n   */\n  trackExternalLink(url, linkText = '') {\n    this._sendToGA4('external_link', {\n      link_url: url,\n      link_text: linkText,\n    });\n  }\n\n  /**\n   * Track scroll depth (simplified)\n   */\n  trackScrollDepth(depth = null) {\n    const scrollDepth =\n      depth ||\n      Math.round(\n        (window.scrollY /\n          (document.documentElement.scrollHeight - window.innerHeight)) *\n          100\n      );\n    this._sendToGA4('scroll_depth', { scroll_depth: scrollDepth });\n  }\n\n  /**\n   * Track time on page (simplified)\n   */\n  trackTimeOnPage() {\n    if (!this.pageStartTime) {\n      this.pageStartTime = Date.now();\n      return;\n    }\n    const timeSpent = Math.round((Date.now() - this.pageStartTime) / 1000);\n    this._sendToGA4('time_on_page', { time_spent_seconds: timeSpent });\n  }\n\n  /**\n   * Track Core Web Vitals\n   */\n  trackCoreWebVital(metric, value) {\n    this._sendToGA4('core_web_vitals', {\n      metric: metric,\n      value: Math.round(value * 100) / 100, // Round to 2 decimal places\n      page_path: window.location.pathname,\n    });\n  }\n\n  /**\n   * Track case study interactions (view, completion, etc.)\n   */\n  trackCaseStudyInteraction(\n    caseStudyName,\n    interactionType = 'view',\n    section = 'body'\n  ) {\n    this._sendToGA4('case_study_interaction', {\n      case_study_name: caseStudyName,\n      action: interactionType,\n      section: section,\n    });\n  }\n\n  /**\n   * Track case study completion\n   */\n  trackCaseStudyCompletion(caseStudyName) {\n    this.trackCaseStudyInteraction(caseStudyName, 'complete');\n  }\n  getStatus() {\n    return {\n      initialized: this.isInitialized,\n      consentGiven: this.consentGiven,\n      fallbackMode: this.fallbackMode,\n      isDevelopment: this.isDevelopment,\n      queueLength: this.queue.length,\n    };\n  }\n}\n\n// Create singleton instance\nconst analytics = new SimpleAnalytics();\n\n// Auto-initialize only in browser environment\nif (typeof window !== 'undefined') {\n  // Set up global API immediately (synchronously)\n  const globalAPI = {\n    trackProjectClick: (...args) => analytics.trackProjectClick(...args),\n    trackResumeDownload: () => analytics.trackResumeDownload(),\n    trackContactForm: (...args) => analytics.trackContactForm(...args),\n    trackExternalLink: (...args) => analytics.trackExternalLink(...args),\n    trackScrollDepth: () => analytics.trackScrollDepth(),\n    trackTimeOnPage: () => analytics.trackTimeOnPage(),\n    trackImageLightbox: (...args) => analytics.trackImageLightbox(...args),\n    trackCaseStudyCompletion: (...args) =>\n      analytics.trackCaseStudyCompletion(...args),\n    setConsent: granted => analytics.setConsent(granted),\n    getStatus: () => analytics.getStatus(),\n  };\n\n  // Expose global API\n  window.portfolioAnalytics = globalAPI;\n\n  // Initialize analytics asynchronously\n  analytics\n    .init()\n    .then(success => {\n      if (success) {\n        console.warn('Portfolio Analytics initialized successfully');\n      } else {\n        console.warn('Portfolio Analytics initialized in fallback mode');\n      }\n    })\n    .catch(error => {\n      console.warn('Portfolio Analytics initialization failed:', error);\n    });\n}\n\n// Export for ES modules\nexport default analytics;\n\n// Also export the class for testing\nexport { SimpleAnalytics };\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","value","$bf9f16924f1c18dc$export$2d9921d8d94967bf","$bf9f16924f1c18dc$export$2e2bcd8739ae039","options","measurementId","isInitialized","consentGiven","_checkConsent","isDevelopment","_isDevelopment","queue","fallbackMode","_waitForGtag","_configureGA4","_processQueue","_enableAutoTracking","error","_handleError","Promise","resolve","gtag","attempts","checkGtag","setInterval","clearInterval","document","dataLayer","Date","page_title","title","page_location","location","href","allow_ad_personalization_signals","allow_google_signals","send_page_view","consent","localStorage","getItem","setConsent","granted","setItem","hostname","port","addEventListener","hidden","trackTimeOnPage","maxScrollDepth","scrollDepth","Math","round","scrollY","documentElement","scrollHeight","innerHeight","trackScrollDepth","_initCoreWebVitals","observer","PerformanceObserver","list","entries","getEntries","length","lastEntry","trackCoreWebVital","startTime","observe","entryTypes","setTimeout","disconnect","_sendToGA4","eventName","parameters","console","warn","push","forEach","context","trackProjectClick","projectName","projectType","project_name","project_type","interaction_type","trackResumeDownload","file_name","file_type","trackContactForm","action","method","trackExternalLink","url","linkText","link_url","link_text","depth","scroll_depth","pageStartTime","now","timeSpent","time_spent_seconds","metric","page_path","pathname","trackCaseStudyInteraction","caseStudyName","interactionType","section","case_study_name","trackCaseStudyCompletion","getStatus","initialized","queueLength","$bf9f16924f1c18dc$var$analytics","portfolioAnalytics","args","trackImageLightbox","then","success","catch"],"version":3,"file":"simple-analytics.5afbc888.js.map"}