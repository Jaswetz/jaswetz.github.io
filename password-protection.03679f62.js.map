{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,qB,W,O,C,G,E,E,O,C,yB,W,O,C,GCKC,IAAA,EAAA,EAAA,QAIM,OAAM,EACX,YAAY,CAAW,CAAE,CACvB,IAAI,CAAC,WAAW,CAAG,EACnB,IAAI,CAAC,MAAM,CAAG,AAAA,CAAA,EAAA,EAAA,kBAAiB,AAAjB,EAAmB,GACjC,IAAI,CAAC,UAAU,CAAG,CAAA,EAAG,AAAA,EAAA,eAAc,CAAE,MAAM,CAAC,aAAa,CAAA,EAAG,EAAA,CAAa,CAGzE,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAC/C,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAC/C,IAAI,CAAC,cAAc,CAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CACrD,CAKA,MAAO,QACL,AAAK,IAAI,CAAC,MAAM,CAQZ,IAAI,CAAC,eAAe,QACtB,IAAI,CAAC,WAAW,QAKlB,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,kBAAkB,SAdrB,QAAQ,IAAI,CACV,CAAC,gDAAgD,EAAE,IAAI,CAAC,WAAW,CAAA,CAAE,CAc3E,CAMA,iBAAkB,CAChB,GAAI,CACF,IAAM,EAAW,aAAa,OAAO,CAAC,IAAI,CAAC,UAAU,EACrD,GAAI,CAAC,EAAW,MAAO,CAAA,EAEvB,GAAM,CAAA,UAAE,CAAS,CAAE,CAAG,KAAK,KAAK,CAAC,GAC3B,EAAM,KAAK,GAAG,GACd,EAAkB,AAAA,EAAA,eAAc,CAAE,MAAM,CAAC,eAAe,CAG9D,GAAI,EAAM,EAAY,EAEpB,OADA,aAAa,UAAU,CAAC,IAAI,CAAC,UAAU,EAChC,CAAA,EAGT,MAAO,CAAA,CACT,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,iCAAkC,GACzC,CAAA,CACT,CACF,CAOA,aAAa,CAAQ,CAAE,CACrB,GAAI,IAAa,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAErC,IAAM,EAAW,CACf,UAAW,KAAK,GAAG,GACnB,YAAa,IAAI,CAAC,WAAW,AAC/B,EAEA,OADA,aAAa,OAAO,CAAC,IAAI,CAAC,UAAU,CAAE,KAAK,SAAS,CAAC,IAC9C,CAAA,CACT,CACA,MAAO,CAAA,CACT,CAKA,aAAc,CACZ,IAAM,EAAc,SAAS,aAAa,CAAC,QACrC,EAAS,SAAS,aAAa,CAAC,cAElC,CAAA,GAAe,aAAuB,aACxC,CAAA,EAAY,KAAK,CAAC,OAAO,CAAG,MAD9B,EAGI,GAAU,aAAkB,aAC9B,CAAA,EAAO,KAAK,CAAC,OAAO,CAAG,MADzB,CAGF,CAKA,aAAc,CACZ,IAAM,EAAc,SAAS,aAAa,CAAC,QACrC,EAAS,SAAS,aAAa,CAAC,cAElC,CAAA,GAAe,aAAuB,aACxC,CAAA,EAAY,KAAK,CAAC,OAAO,CAAG,OAD9B,EAGI,GAAU,aAAkB,aAC9B,CAAA,EAAO,KAAK,CAAC,OAAO,CAAG,OADzB,EAKA,IAAM,EAAkB,SAAS,cAAc,CAC7C,8BAEE,CAAA,GACF,EAAgB,MAAM,EAE1B,CAKA,oBAAqB,CACnB,IAAM,EAAU,SAAS,aAAa,CAAC,MACvC,CAAA,EAAQ,EAAE,CAAG,8BACb,EAAQ,SAAS,CAAG,8BAEpB,EAAQ,SAAS,CAAG;A;A;A;AAIgC,wDAAA,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;AAiC9E,IAAA,CAAC,CAED,SAAS,IAAI,CAAC,WAAW,CAAC,GAG1B,IAAM,EAAO,SAAS,cAAc,CAAC,iBAC/B,EAAY,SAAS,cAAc,CAAC,cACpC,EAAgB,SAAS,cAAc,CAAC,uBAE9C,EAAK,gBAAgB,CAAC,SAAU,IAAI,CAAC,YAAY,EACjD,EAAU,gBAAgB,CAAC,QAAS,IAAI,CAAC,YAAY,EACrD,EAAc,gBAAgB,CAAC,WAAY,IAAI,CAAC,cAAc,EAG9D,WAAW,IAAM,EAAc,KAAK,GAAI,IAC1C,CAMA,aAAa,CAAK,CAAE,CAClB,EAAM,cAAc,GAEpB,IAAM,EAAgB,SAAS,cAAc,CAAC,uBACxC,EAAW,SAAS,cAAc,CAAC,kBAEzC,GAAI,CAAE,CAAA,aAAyB,gBAAA,EAAmB,YAChD,QAAQ,KAAK,CAAC,4BAIhB,IAAM,EAAW,EAAc,KAAK,CAAC,IAAI,GAErC,IAAI,CAAC,YAAY,CAAC,GAEpB,IAAI,CAAC,WAAW,IAGZ,GACF,CAAA,EAAS,KAAK,CAAC,OAAO,CAAG,OAD3B,EAGA,EAAc,KAAK,CAAG,GACtB,EAAc,KAAK,GAGnB,EAAc,SAAS,CAAC,GAAG,CAAC,SAC5B,WAAW,IAAM,EAAc,SAAS,CAAC,MAAM,CAAC,SAAU,KAE9D,CAKA,cAAe,CAEb,GAAI,OAAO,OAAO,CAAC,MAAM,CAAG,GAAK,SAAS,QAAQ,CAChD,OAAO,OAAO,CAAC,IAAI,OACd,CAEL,IAAM,EACJ,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAI,AAAA,EAAA,eAAc,CAAE,MAAM,CAAC,eAAe,AACxE,CAAA,OAAO,QAAQ,CAAC,IAAI,CAAG,CACzB,CACF,CAMA,eAAe,CAAK,CAAE,CAChB,AAAc,WAAd,EAAM,GAAG,EACX,IAAI,CAAC,YAAY,EAErB,CAKA,QAAS,CACP,aAAa,UAAU,CAAC,IAAI,CAAC,UAAU,CACzC,CAKA,OAAO,WAAY,CACjB,IAAM,EAAO,OAAO,IAAI,CAAC,cACnB,EAAS,AAAA,EAAA,eAAc,CAAE,MAAM,CAAC,aAAa,CAEnD,EAAK,OAAO,CAAC,AAAC,IACR,EAAI,UAAU,CAAC,IACjB,aAAa,UAAU,CAAC,EAE5B,EACF,CACF,CAOO,SAAS,EAAuB,CAAW,EAChD,IAAM,EAAa,IAAI,EAAmB,GAS1C,MANI,AAAwB,YAAxB,SAAS,UAAU,CACrB,SAAS,gBAAgB,CAAC,mBAAoB,IAAM,EAAW,IAAI,IAEnE,EAAW,IAAI,GAGV,CACT,C,G,E,Q,S,C,C,C,E,E,E,O,C,kB,W,O,C,G,E,E,O,C,qB,W,O,C,GCrRO,IAAM,EAAkB,CAE7B,OAAQ,CAEN,gBAAiB,MAEjB,cAAe,wBAEf,gBAAiB,cACnB,EAGA,qBAAsB,CACpB,sBAAuB,CACrB,SAAU,mBACV,MAAO,kDACP,YACE,4FACF,iBAAkB,cACpB,CAQF,CACF,EAOO,SAAS,EAAmB,CAAW,EAC5C,OAAO,EAAgB,oBAAoB,CAAC,EAAY,EAAI,IAC9D,C,G,E","sources":["<anon>","src/js/auth/password-protection.js","src/js/auth/password-config.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire9b4d\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire9b4d\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"g4twZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"PasswordProtection\", function () { return $bb33ed4c841bcbfb$export$34ffbd20c4d4520e; });\n$parcel$export(module.exports, \"initPasswordProtection\", function () { return $bb33ed4c841bcbfb$export$26d27c73f885114e; });\n/**\n * Password Protection System\n *\n * This module handles the password authentication for protected case studies.\n * It provides a secure, user-friendly interface for password protection.\n */ \nvar $S4pv4 = parcelRequire(\"S4pv4\");\nclass $bb33ed4c841bcbfb$export$34ffbd20c4d4520e {\n    constructor(caseStudyId){\n        this.caseStudyId = caseStudyId;\n        this.config = (0, $S4pv4.getCaseStudyConfig)(caseStudyId);\n        this.storageKey = `${(0, $S4pv4.PASSWORD_CONFIG).global.storagePrefix}${caseStudyId}`;\n        // Bind methods to maintain context\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n    /**\n   * Initialize password protection for the current page\n   */ init() {\n        if (!this.config) {\n            console.warn(`No password configuration found for case study: ${this.caseStudyId}`);\n            return;\n        }\n        // Check if user is already authenticated\n        if (this.isAuthenticated()) {\n            this.showContent();\n            return;\n        }\n        // Hide main content and show password prompt\n        this.hideContent();\n        this.showPasswordPrompt();\n    }\n    /**\n   * Check if user is authenticated for this case study\n   * @returns {boolean} True if authenticated and session is valid\n   */ isAuthenticated() {\n        try {\n            const authData = localStorage.getItem(this.storageKey);\n            if (!authData) return false;\n            const { timestamp: timestamp } = JSON.parse(authData);\n            const now = Date.now();\n            const sessionDuration = (0, $S4pv4.PASSWORD_CONFIG).global.sessionDuration;\n            // Check if session has expired\n            if (now - timestamp > sessionDuration) {\n                localStorage.removeItem(this.storageKey);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error checking authentication:\", error);\n            return false;\n        }\n    }\n    /**\n   * Authenticate user with provided password\n   * @param {string} password - The password to verify\n   * @returns {boolean} True if password is correct\n   */ authenticate(password) {\n        if (password === this.config.password) {\n            // Store authentication timestamp\n            const authData = {\n                timestamp: Date.now(),\n                caseStudyId: this.caseStudyId\n            };\n            localStorage.setItem(this.storageKey, JSON.stringify(authData));\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Hide the main content of the page\n   */ hideContent() {\n        const mainContent = document.querySelector(\"main\");\n        const footer = document.querySelector(\"site-footer\");\n        if (mainContent && mainContent instanceof HTMLElement) mainContent.style.display = \"none\";\n        if (footer && footer instanceof HTMLElement) footer.style.display = \"none\";\n    }\n    /**\n   * Show the main content of the page\n   */ showContent() {\n        const mainContent = document.querySelector(\"main\");\n        const footer = document.querySelector(\"site-footer\");\n        if (mainContent && mainContent instanceof HTMLElement) mainContent.style.display = \"block\";\n        if (footer && footer instanceof HTMLElement) footer.style.display = \"block\";\n        // Remove password prompt if it exists\n        const passwordOverlay = document.getElementById(\"password-protection-overlay\");\n        if (passwordOverlay) passwordOverlay.remove();\n    }\n    /**\n   * Create and show the password prompt interface\n   */ showPasswordPrompt() {\n        const overlay = document.createElement(\"div\");\n        overlay.id = \"password-protection-overlay\";\n        overlay.className = \"password-protection-overlay\";\n        overlay.innerHTML = `\n      <div class=\"password-protection-modal\">\n        <div class=\"password-protection-content\">\n          <div class=\"password-protection-header\">\n            <h1 class=\"password-protection-description\">${this.config.description}</h1>\n          </div>\n          \n          <form class=\"password-protection-form\" id=\"password-form\">\n            <div class=\"form-group\">\n              <label for=\"case-study-password\" class=\"form-label\">Password</label>\n              <input \n                type=\"password\" \n                id=\"case-study-password\" \n                class=\"form-input password-input\" \n                placeholder=\"Enter password\"\n                required\n                autocomplete=\"off\"\n              >\n            </div>\n            \n            <div class=\"password-error\" id=\"password-error\" style=\"display: none;\">\n              Incorrect password. Please try again.\n            </div>\n            \n            <div class=\"form-actions\">\n              <button type=\"button\" class=\"button button--secondary\" id=\"cancel-btn\">\n                Cancel\n              </button>\n              <button type=\"submit\" class=\"button\">\n                Access Case Study\n              </button>\n            </div>\n          </form>\n          \n\n        </div>\n      </div>\n    `;\n        document.body.appendChild(overlay);\n        // Add event listeners\n        const form = document.getElementById(\"password-form\");\n        const cancelBtn = document.getElementById(\"cancel-btn\");\n        const passwordInput = document.getElementById(\"case-study-password\");\n        form.addEventListener(\"submit\", this.handleSubmit);\n        cancelBtn.addEventListener(\"click\", this.handleCancel);\n        passwordInput.addEventListener(\"keypress\", this.handleKeyPress);\n        // Focus on password input\n        setTimeout(()=>passwordInput.focus(), 100);\n    }\n    /**\n   * Handle form submission\n   * @param {Event} event - The form submit event\n   */ handleSubmit(event) {\n        event.preventDefault();\n        const passwordInput = document.getElementById(\"case-study-password\");\n        const errorDiv = document.getElementById(\"password-error\");\n        if (!(passwordInput instanceof HTMLInputElement)) {\n            console.error(\"Password input not found\");\n            return;\n        }\n        const password = passwordInput.value.trim();\n        if (this.authenticate(password)) // Success - show content\n        this.showContent();\n        else {\n            // Show error\n            if (errorDiv) errorDiv.style.display = \"block\";\n            passwordInput.value = \"\";\n            passwordInput.focus();\n            // Shake animation for better UX feedback\n            passwordInput.classList.add(\"shake\");\n            setTimeout(()=>passwordInput.classList.remove(\"shake\"), 500);\n        }\n    }\n    /**\n   * Handle cancel button click\n   */ handleCancel() {\n        // Try to go back to the previous page in browser history\n        if (window.history.length > 1 && document.referrer) window.history.back();\n        else {\n            // Fallback to configured redirect URL if no previous page\n            const redirectUrl = this.config.redirectOnCancel || (0, $S4pv4.PASSWORD_CONFIG).global.defaultRedirect;\n            window.location.href = redirectUrl;\n        }\n    }\n    /**\n   * Handle keypress events for better UX\n   * @param {KeyboardEvent} event - The keypress event\n   */ handleKeyPress(event) {\n        if (event.key === \"Escape\") this.handleCancel();\n    }\n    /**\n   * Clear authentication for this case study\n   */ logout() {\n        localStorage.removeItem(this.storageKey);\n    }\n    /**\n   * Clear all case study authentications\n   */ static logoutAll() {\n        const keys = Object.keys(localStorage);\n        const prefix = (0, $S4pv4.PASSWORD_CONFIG).global.storagePrefix;\n        keys.forEach((key)=>{\n            if (key.startsWith(prefix)) localStorage.removeItem(key);\n        });\n    }\n}\nfunction $bb33ed4c841bcbfb$export$26d27c73f885114e(caseStudyId) {\n    const protection = new $bb33ed4c841bcbfb$export$34ffbd20c4d4520e(caseStudyId);\n    // Initialize when DOM is ready\n    if (document.readyState === \"loading\") document.addEventListener(\"DOMContentLoaded\", ()=>protection.init());\n    else protection.init();\n    return protection;\n}\n\n});\nparcelRegister(\"S4pv4\", function(module, exports) {\n\n$parcel$export(module.exports, \"PASSWORD_CONFIG\", function () { return $0a28770d6b593462$export$3cf2af023afdc4d9; });\n$parcel$export(module.exports, \"getCaseStudyConfig\", function () { return $0a28770d6b593462$export$ecbd04f785dd76c0; });\n/**\n * Password Protection Configuration\n *\n * This module manages which case studies require password protection\n * and their associated settings.\n */ const $0a28770d6b593462$export$3cf2af023afdc4d9 = {\n    // Global settings\n    global: {\n        // Session duration in milliseconds (24 hours)\n        sessionDuration: 86400000,\n        // Storage key prefix\n        storagePrefix: \"protected_case_study_\",\n        // Default redirect after successful authentication\n        defaultRedirect: \"../work.html\"\n    },\n    // Protected case studies configuration\n    protectedCaseStudies: {\n        \"project-autodesk-di\": {\n            password: \"CuriousDesign404\",\n            title: \"Autodesk Fusion: Device Independence Case Study\",\n            description: \"This case study contains confidential design work. Please enter the password to continue.\",\n            redirectOnCancel: \"../work.html\"\n        }\n    }\n};\nfunction $0a28770d6b593462$export$ecbd04f785dd76c0(caseStudyId) {\n    return $0a28770d6b593462$export$3cf2af023afdc4d9.protectedCaseStudies[caseStudyId] || null;\n}\nfunction $0a28770d6b593462$export$6257b2425a44b4bf(caseStudyId) {\n    return caseStudyId in $0a28770d6b593462$export$3cf2af023afdc4d9.protectedCaseStudies;\n}\nfunction $0a28770d6b593462$export$c1d7c72e352478cf() {\n    return Object.keys($0a28770d6b593462$export$3cf2af023afdc4d9.protectedCaseStudies);\n}\n\n});\n\n\n\nparcelRequire(\"g4twZ\");\n\n//# sourceMappingURL=password-protection.03679f62.js.map\n","/**\n * Password Protection System\n *\n * This module handles the password authentication for protected case studies.\n * It provides a secure, user-friendly interface for password protection.\n */\n\nimport { PASSWORD_CONFIG, getCaseStudyConfig } from \"./password-config.js\";\n\nexport class PasswordProtection {\n  constructor(caseStudyId) {\n    this.caseStudyId = caseStudyId;\n    this.config = getCaseStudyConfig(caseStudyId);\n    this.storageKey = `${PASSWORD_CONFIG.global.storagePrefix}${caseStudyId}`;\n\n    // Bind methods to maintain context\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  /**\n   * Initialize password protection for the current page\n   */\n  init() {\n    if (!this.config) {\n      console.warn(\n        `No password configuration found for case study: ${this.caseStudyId}`\n      );\n      return;\n    }\n\n    // Check if user is already authenticated\n    if (this.isAuthenticated()) {\n      this.showContent();\n      return;\n    }\n\n    // Hide main content and show password prompt\n    this.hideContent();\n    this.showPasswordPrompt();\n  }\n\n  /**\n   * Check if user is authenticated for this case study\n   * @returns {boolean} True if authenticated and session is valid\n   */\n  isAuthenticated() {\n    try {\n      const authData = localStorage.getItem(this.storageKey);\n      if (!authData) {return false;}\n\n      const { timestamp } = JSON.parse(authData);\n      const now = Date.now();\n      const sessionDuration = PASSWORD_CONFIG.global.sessionDuration;\n\n      // Check if session has expired\n      if (now - timestamp > sessionDuration) {\n        localStorage.removeItem(this.storageKey);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Error checking authentication:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Authenticate user with provided password\n   * @param {string} password - The password to verify\n   * @returns {boolean} True if password is correct\n   */\n  authenticate(password) {\n    if (password === this.config.password) {\n      // Store authentication timestamp\n      const authData = {\n        timestamp: Date.now(),\n        caseStudyId: this.caseStudyId,\n      };\n      localStorage.setItem(this.storageKey, JSON.stringify(authData));\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Hide the main content of the page\n   */\n  hideContent() {\n    const mainContent = document.querySelector(\"main\");\n    const footer = document.querySelector(\"site-footer\");\n\n    if (mainContent && mainContent instanceof HTMLElement) {\n      mainContent.style.display = \"none\";\n    }\n    if (footer && footer instanceof HTMLElement) {\n      footer.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Show the main content of the page\n   */\n  showContent() {\n    const mainContent = document.querySelector(\"main\");\n    const footer = document.querySelector(\"site-footer\");\n\n    if (mainContent && mainContent instanceof HTMLElement) {\n      mainContent.style.display = \"block\";\n    }\n    if (footer && footer instanceof HTMLElement) {\n      footer.style.display = \"block\";\n    }\n\n    // Remove password prompt if it exists\n    const passwordOverlay = document.getElementById(\n      \"password-protection-overlay\"\n    );\n    if (passwordOverlay) {\n      passwordOverlay.remove();\n    }\n  }\n\n  /**\n   * Create and show the password prompt interface\n   */\n  showPasswordPrompt() {\n    const overlay = document.createElement(\"div\");\n    overlay.id = \"password-protection-overlay\";\n    overlay.className = \"password-protection-overlay\";\n\n    overlay.innerHTML = `\n      <div class=\"password-protection-modal\">\n        <div class=\"password-protection-content\">\n          <div class=\"password-protection-header\">\n            <h1 class=\"password-protection-description\">${this.config.description}</h1>\n          </div>\n          \n          <form class=\"password-protection-form\" id=\"password-form\">\n            <div class=\"form-group\">\n              <label for=\"case-study-password\" class=\"form-label\">Password</label>\n              <input \n                type=\"password\" \n                id=\"case-study-password\" \n                class=\"form-input password-input\" \n                placeholder=\"Enter password\"\n                required\n                autocomplete=\"off\"\n              >\n            </div>\n            \n            <div class=\"password-error\" id=\"password-error\" style=\"display: none;\">\n              Incorrect password. Please try again.\n            </div>\n            \n            <div class=\"form-actions\">\n              <button type=\"button\" class=\"button button--secondary\" id=\"cancel-btn\">\n                Cancel\n              </button>\n              <button type=\"submit\" class=\"button\">\n                Access Case Study\n              </button>\n            </div>\n          </form>\n          \n\n        </div>\n      </div>\n    `;\n\n    document.body.appendChild(overlay);\n\n    // Add event listeners\n    const form = document.getElementById(\"password-form\");\n    const cancelBtn = document.getElementById(\"cancel-btn\");\n    const passwordInput = document.getElementById(\"case-study-password\");\n\n    form.addEventListener(\"submit\", this.handleSubmit);\n    cancelBtn.addEventListener(\"click\", this.handleCancel);\n    passwordInput.addEventListener(\"keypress\", this.handleKeyPress);\n\n    // Focus on password input\n    setTimeout(() => passwordInput.focus(), 100);\n  }\n\n  /**\n   * Handle form submission\n   * @param {Event} event - The form submit event\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const passwordInput = document.getElementById(\"case-study-password\");\n    const errorDiv = document.getElementById(\"password-error\");\n\n    if (!(passwordInput instanceof HTMLInputElement)) {\n      console.error(\"Password input not found\");\n      return;\n    }\n\n    const password = passwordInput.value.trim();\n\n    if (this.authenticate(password)) {\n      // Success - show content\n      this.showContent();\n    } else {\n      // Show error\n      if (errorDiv) {\n        errorDiv.style.display = \"block\";\n      }\n      passwordInput.value = \"\";\n      passwordInput.focus();\n\n      // Shake animation for better UX feedback\n      passwordInput.classList.add(\"shake\");\n      setTimeout(() => passwordInput.classList.remove(\"shake\"), 500);\n    }\n  }\n\n  /**\n   * Handle cancel button click\n   */\n  handleCancel() {\n    // Try to go back to the previous page in browser history\n    if (window.history.length > 1 && document.referrer) {\n      window.history.back();\n    } else {\n      // Fallback to configured redirect URL if no previous page\n      const redirectUrl =\n        this.config.redirectOnCancel || PASSWORD_CONFIG.global.defaultRedirect;\n      window.location.href = redirectUrl;\n    }\n  }\n\n  /**\n   * Handle keypress events for better UX\n   * @param {KeyboardEvent} event - The keypress event\n   */\n  handleKeyPress(event) {\n    if (event.key === \"Escape\") {\n      this.handleCancel();\n    }\n  }\n\n  /**\n   * Clear authentication for this case study\n   */\n  logout() {\n    localStorage.removeItem(this.storageKey);\n  }\n\n  /**\n   * Clear all case study authentications\n   */\n  static logoutAll() {\n    const keys = Object.keys(localStorage);\n    const prefix = PASSWORD_CONFIG.global.storagePrefix;\n\n    keys.forEach((key) => {\n      if (key.startsWith(prefix)) {\n        localStorage.removeItem(key);\n      }\n    });\n  }\n}\n\n/**\n * Initialize password protection for a case study\n * This is the main function to call from case study pages\n * @param {string} caseStudyId - The case study identifier\n */\nexport function initPasswordProtection(caseStudyId) {\n  const protection = new PasswordProtection(caseStudyId);\n\n  // Initialize when DOM is ready\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", () => protection.init());\n  } else {\n    protection.init();\n  }\n\n  return protection;\n}\n","/**\n * Password Protection Configuration\n *\n * This module manages which case studies require password protection\n * and their associated settings.\n */\n\nexport const PASSWORD_CONFIG = {\n  // Global settings\n  global: {\n    // Session duration in milliseconds (24 hours)\n    sessionDuration: 24 * 60 * 60 * 1000,\n    // Storage key prefix\n    storagePrefix: \"protected_case_study_\",\n    // Default redirect after successful authentication\n    defaultRedirect: \"../work.html\",\n  },\n\n  // Protected case studies configuration\n  protectedCaseStudies: {\n    \"project-autodesk-di\": {\n      password: \"CuriousDesign404\",\n      title: \"Autodesk Fusion: Device Independence Case Study\",\n      description:\n        \"This case study contains confidential design work. Please enter the password to continue.\",\n      redirectOnCancel: \"../work.html\",\n    },\n    // Future case studies can be added here:\n    // 'project-name': {\n    //   password: 'YourPassword',\n    //   title: 'Project Title',\n    //   description: 'Description for password prompt',\n    //   redirectOnCancel: '../work.html'\n    // }\n  },\n};\n\n/**\n * Get configuration for a specific case study\n * @param {string} caseStudyId - The case study identifier\n * @returns {object|null} Configuration object or null if not protected\n */\nexport function getCaseStudyConfig(caseStudyId) {\n  return PASSWORD_CONFIG.protectedCaseStudies[caseStudyId] || null;\n}\n\n/**\n * Check if a case study is protected\n * @param {string} caseStudyId - The case study identifier\n * @returns {boolean} True if protected, false otherwise\n */\nexport function isCaseStudyProtected(caseStudyId) {\n  return caseStudyId in PASSWORD_CONFIG.protectedCaseStudies;\n}\n\n/**\n * Get all protected case study IDs\n * @returns {string[]} Array of protected case study IDs\n */\nexport function getProtectedCaseStudyIds() {\n  return Object.keys(PASSWORD_CONFIG.protectedCaseStudies);\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$bb33ed4c841bcbfb$export$34ffbd20c4d4520e","$bb33ed4c841bcbfb$export$26d27c73f885114e","$S4pv4","caseStudyId","config","getCaseStudyConfig","storageKey","PASSWORD_CONFIG","storagePrefix","handleSubmit","bind","handleCancel","handleKeyPress","isAuthenticated","showContent","hideContent","showPasswordPrompt","console","warn","authData","localStorage","getItem","timestamp","JSON","parse","now","Date","sessionDuration","removeItem","error","authenticate","password","setItem","stringify","mainContent","document","querySelector","footer","HTMLElement","style","display","passwordOverlay","getElementById","remove","overlay","createElement","className","innerHTML","description","body","appendChild","form","cancelBtn","passwordInput","addEventListener","setTimeout","focus","event","preventDefault","errorDiv","HTMLInputElement","value","trim","classList","add","history","length","referrer","back","redirectUrl","redirectOnCancel","defaultRedirect","location","href","key","logout","logoutAll","keys","prefix","forEach","startsWith","protection","readyState","$0a28770d6b593462$export$3cf2af023afdc4d9","$0a28770d6b593462$export$ecbd04f785dd76c0","protectedCaseStudies","title"],"version":3,"file":"password-protection.03679f62.js.map"}